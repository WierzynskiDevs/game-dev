let currentLevel = 1;
let userCommands = [];
let selectedTrack = '';
let currentTrackData = {};

// DADOS DAS TRILHAS
const tracks = {
    javascript: {
        name: "JavaScript",
        icon: "üü®",
        character: "üíª",
        levels: [
            // N√çVEL 1 - VARI√ÅVEIS
            {
                story: "üåü Bem-vindo ao Reino do JavaScript!\n\nVoc√™ √© um desenvolvedor web em treinamento. Sua miss√£o √© dominar a linguagem que controla toda a web!\n\nPrimeiro Desafio: Crie sua primeira vari√°vel para armazenar o nome do her√≥i. Use 'let' para declarar vari√°veis em JavaScript!",
                concept: "Vari√°veis",
                explanation: "VARI√ÅVEIS s√£o 'caixas' que guardam dados! Em JavaScript, usamos 'let' para criar vari√°veis que podem mudar de valor, 'const' para valores fixos. √â como dar um nome para um valor que queremos usar depois.",
                solution: ['let nomeHeroi = "Aventureiro";', 'console.log(nomeHeroi);'],
                success: "üéâ Perfeito! Voc√™ criou sua primeira vari√°vel em JavaScript!\n\nVari√°veis s√£o fundamentais - elas guardam informa√ß√µes que seu programa pode usar e modificar. O 'let' cria uma vari√°vel que pode ser alterada depois!",
                commands: ['let nomeHeroi = "Aventureiro";', 'console.log(nomeHeroi);', 'const PI = 3.14;', 'let idade = 25;', 'var antigo = "evite";']
            },
    
            // N√çVEL 2 - TIPOS DE DADOS
            {
                story: "üìä Excelente! Agora vamos conhecer os tipos de dados.\n\nSegundo Desafio: JavaScript trabalha com diferentes tipos! Crie uma vari√°vel com n√∫mero 'let pontos = 100', uma com texto 'let status = \"ativo\"' e uma booleana 'let vivo = true'.",
                concept: "Tipos de Dados",
                explanation: "TIPOS DE DADOS definem que tipo de informa√ß√£o uma vari√°vel guarda! Numbers (n√∫meros), Strings (texto), Booleans (verdadeiro/falso), Arrays (listas) e Objects (objetos). Cada tipo tem suas caracter√≠sticas!",
                solution: ['let pontos = 100;', 'let status = "ativo";', 'let vivo = true;', 'console.log(typeof pontos);'],
                success: "üî¢ Fant√°stico! Voc√™ dominou os tipos b√°sicos do JavaScript!\n\nEntender tipos de dados √© crucial! Numbers para c√°lculos, Strings para texto, Booleans para l√≥gica. JavaScript √© din√¢mico e flex√≠vel!",
                commands: ['let pontos = 100;', 'let status = "ativo";', 'let vivo = true;', 'console.log(typeof pontos);', 'let lista = [];', 'let objeto = {};']
            },
    
            // N√çVEL 3 - FUN√á√ïES B√ÅSICAS
            {
                story: "üíª Incr√≠vel! Agora vamos criar fun√ß√µes.\n\nTerceiro Desafio: O her√≥i precisa de uma fun√ß√£o para calcular danos! Crie uma fun√ß√£o chamada 'calcularDano' que recebe um par√¢metro 'ataque' e retorna o valor multiplicado por 2.",
                concept: "Fun√ß√µes B√°sicas",
                explanation: "FUN√á√ïES s√£o blocos de c√≥digo reutiliz√°veis! Voc√™ define uma vez e pode usar muitas vezes. Em JavaScript, usamos 'function nome(par√¢metros) { c√≥digo }'. Elas organizam e simplificam o c√≥digo!",
                solution: ['function calcularDano(ataque) {', 'return ataque * 2;', '}', 'console.log(calcularDano(10));'],
                success: "‚ö° Sensacional! Sua fun√ß√£o est√° funcionando perfeitamente!\n\nFun√ß√µes s√£o o cora√ß√£o do JavaScript! Elas organizam o c√≥digo, evitam repeti√ß√£o e tornam tudo mais limpo e reutiliz√°vel!",
                commands: ['function calcularDano(ataque) {', 'return ataque * 2;', '}', 'console.log(calcularDano(10));', 'let resultado = calcularDano(5);']
            },
    
            // N√çVEL 4 - CONDICIONAIS
            {
                story: "ü§î Perfeito! Vamos tomar decis√µes inteligentes.\n\nQuarto Desafio: O her√≥i precisa verificar se tem energia suficiente! Use 'if (energia >= 50)' para verificar se energia √© maior ou igual a 50, e exiba mensagens diferentes para cada caso.",
                concept: "Condicionais (if/else)",
                explanation: "CONDICIONAIS fazem programas tomarem decis√µes! 'if' verifica uma condi√ß√£o, 'else' define o que fazer se for falsa, 'else if' adiciona mais op√ß√µes. √â como dar intelig√™ncia ao c√≥digo!",
                solution: ['let energia = 75;', 'if (energia >= 50) {', 'console.log("Energia suficiente!");', '} else {', 'console.log("Energia baixa!");', '}'],
                success: "üß† Excelente! Seu programa agora toma decis√µes inteligentes!\n\nCondicionais s√£o fundamentais na programa√ß√£o. Elas permitem que o c√≥digo se adapte a diferentes situa√ß√µes automaticamente!",
                commands: ['let energia = 75;', 'if (energia >= 50) {', 'console.log("Energia suficiente!");', '} else {', 'console.log("Energia baixa!");', '}', 'else if (energia > 25) {']
            },
    
            // N√çVEL 5 - LOOPS
            {
                story: "üîÑ Fant√°stico! Vamos automatizar tarefas repetitivas.\n\nQuinto Desafio: O her√≥i precisa coletrar 5 moedas! Use um loop 'for' para contar de 1 at√© 5 e exibir 'Moeda coletada: X' para cada itera√ß√£o.",
                concept: "Loops (for)",
                explanation: "LOOPS fazem o computador repetir tarefas automaticamente! 'for' √© perfeito para repeti√ß√µes com contador, 'while' para condi√ß√µes. Em vez de escrever c√≥digo repetido, use loops!",
                solution: ['for (let i = 1; i <= 5; i++) {', 'console.log("Moeda coletada: " + i);', '}'],
                success: "ü™ô Incr√≠vel! Voc√™ automatizou a coleta de moedas!\n\nLoops s√£o uma das ferramentas mais poderosas da programa√ß√£o. Eles fazem o computador trabalhar para voc√™, executando tarefas repetitivas sem erros!",
                commands: ['for (let i = 1; i <= 5; i++) {', 'console.log("Moeda coletada: " + i);', '}', 'let contador = 0;', 'while (contador < 3) {']
            },
    
            // N√çVEL 6 - ARRAYS
            {
                story: "üìã Sensacional! Vamos organizar dados em listas.\n\nSexto Desafio: Crie um invent√°rio do her√≥i! Declare 'let inventario = [\"espada\", \"po√ß√£o\", \"escudo\"]' e use 'inventario.push(\"moeda\")' para adicionar um item.",
                concept: "Arrays (Listas)",
                explanation: "ARRAYS s√£o listas que guardam m√∫ltiplos valores! Voc√™ pode adicionar (push), remover (pop), acessar por posi√ß√£o [0] e muito mais. √â como ter uma caixa organizada com v√°rios compartimentos!",
                solution: ['let inventario = ["espada", "po√ß√£o", "escudo"];', 'inventario.push("moeda");', 'console.log(inventario);', 'console.log(inventario[0]);'],
                success: "üéí Perfeito! Voc√™ criou e manipulou seu primeiro array!\n\nArrays s√£o essenciais para organizar dados. Agora voc√™ pode trabalhar com listas de qualquer tamanho de forma eficiente!",
                commands: ['let inventario = ["espada", "po√ß√£o", "escudo"];', 'inventario.push("moeda");', 'console.log(inventario);', 'console.log(inventario[0]);', 'inventario.pop();']
            },
    
            // N√çVEL 7 - OBJETOS
            {
                story: "üèõÔ∏è Excelente! Vamos criar estruturas de dados complexas.\n\nS√©timo Desafio: Crie um objeto para representar o her√≥i! Use 'let heroi = { nome: \"Link\", vida: 100, nivel: 1 }' e acesse uma propriedade com 'heroi.nome'.",
                concept: "Objetos",
                explanation: "OBJETOS agrupam dados relacionados em propriedades! Como uma ficha de personagem: nome, vida, n√≠vel. Usamos chaves {} e acessamos com ponto (.) ou colchetes []. √â organiza√ß√£o avan√ßada de dados!",
                solution: ['let heroi = {', 'nome: "Link",', 'vida: 100,', 'nivel: 1', '};', 'console.log(heroi.nome);'],
                success: "ü¶∏‚Äç‚ôÇÔ∏è Fant√°stico! Voc√™ criou seu primeiro objeto JavaScript!\n\nObjetos s√£o fundamentais na programa√ß√£o moderna. Eles permitem modelar entidades do mundo real no c√≥digo!",
                commands: ['let heroi = {', 'nome: "Link",', 'vida: 100,', 'nivel: 1', '};', 'console.log(heroi.nome);', 'heroi.experiencia = 0;']
            },
    
            // N√çVEL 8 - M√âTODOS DE OBJETOS
            {
                story: "‚öîÔ∏è Incr√≠vel! Vamos adicionar comportamentos aos objetos.\n\nOitavo Desafio: Adicione um m√©todo ao her√≥i! Crie 'atacar: function() { return this.nome + \" ataca!\"; }' dentro do objeto her√≥i e chame com 'heroi.atacar()'.",
                concept: "M√©todos de Objetos",
                explanation: "M√âTODOS s√£o fun√ß√µes dentro de objetos! Eles definem o que o objeto pode fazer. 'this' se refere ao pr√≥prio objeto. √â como dar superpoderes aos seus objetos!",
                solution: ['let heroi = {', 'nome: "Link",', 'atacar: function() {', 'return this.nome + " ataca!";', '}', '};', 'console.log(heroi.atacar());'],
                success: "‚ö° Sensacional! Seu objeto agora tem comportamentos!\n\nM√©todos transformam objetos passivos em entidades ativas. Agora seus objetos podem executar a√ß√µes complexas!",
                commands: ['let heroi = {', 'nome: "Link",', 'atacar: function() {', 'return this.nome + " ataca!";', '}', '};', 'console.log(heroi.atacar());']
            },
    
            // N√çVEL 9 - DOM MANIPULATION
            {
                story: "üåê Perfeito! Vamos controlar p√°ginas web!\n\nNono Desafio: Manipule o DOM! Use 'let elemento = document.getElementById(\"heroi\")' para selecionar um elemento e 'elemento.textContent = \"Her√≥i Poderoso!\"' para alterar seu texto.",
                concept: "Manipula√ß√£o do DOM",
                explanation: "DOM (Document Object Model) √© como JavaScript v√™ e modifica p√°ginas web! Voc√™ pode selecionar elementos, alterar conte√∫do, estilos e estrutura. √â a ponte entre JavaScript e HTML!",
                solution: ['let elemento = document.getElementById("heroi");', 'elemento.textContent = "Her√≥i Poderoso!";'],
                success: "üéØ Incr√≠vel! Voc√™ dominou a manipula√ß√£o do DOM!\n\nIsso √© JavaScript real! Agora voc√™ pode fazer p√°ginas web interativas, alterando conte√∫do e estilos dinamicamente!",
                commands: ['let elemento = document.getElementById("heroi");', 'elemento.textContent = "Her√≥i Poderoso!";', 'elemento.style.color = "red";', 'document.querySelector(".classe");', 'elemento.classList.add("ativo");']
            },
    
            // N√çVEL 10 - EVENTOS
            {
                story: "üëÜ Sensacional! Vamos reagir a intera√ß√µes do usu√°rio.\n\nD√©cimo Desafio: Adicione interatividade! Use 'elemento.addEventListener(\"click\", function() { alert(\"Clicou!\"); })' para responder ao clique do usu√°rio.",
                concept: "Eventos",
                explanation: "EVENTOS fazem p√°ginas responderem ao usu√°rio! Click, hover, scroll, teclado - tudo s√£o eventos. addEventListener 'escuta' eventos e executa c√≥digo quando eles acontecem!",
                solution: ['let botao = document.getElementById("botao");', 'botao.addEventListener("click", function() {', 'alert("Bot√£o clicado!");', '});'],
                success: "üñ±Ô∏è Fant√°stico! Sua p√°gina agora responde ao usu√°rio!\n\nEventos s√£o o que fazem a web interativa. Agora voc√™ pode criar experi√™ncias ricas e responsivas!",
                commands: ['let botao = document.getElementById("botao");', 'botao.addEventListener("click", function() {', 'alert("Bot√£o clicado!");', '});', 'addEventListener("keydown", function(e) {']
            },
    
            // N√çVEL 11 - ARROW FUNCTIONS
            {
                story: "üèπ Excelente! Vamos modernizar nossas fun√ß√µes.\n\nD√©cimo Primeiro Desafio: Use arrow functions! Converta a fun√ß√£o tradicional para arrow function: 'const somar = (a, b) => a + b' e teste com 'console.log(somar(5, 3))'.",
                concept: "Arrow Functions",
                explanation: "ARROW FUNCTIONS s√£o uma forma moderna e concisa de escrever fun√ß√µes! Usam '=>' em vez de 'function'. S√£o mais curtas e t√™m comportamento especial com 'this'. Sintaxe do JavaScript moderno!",
                solution: ['const somar = (a, b) => a + b;', 'console.log(somar(5, 3));'],
                success: "üéØ Perfeito! Voc√™ modernizou suas fun√ß√µes!\n\nArrow functions tornam o c√≥digo mais limpo e s√£o padr√£o no JavaScript moderno. Voc√™ est√° evoluindo como desenvolvedor!",
                commands: ['const somar = (a, b) => a + b;', 'console.log(somar(5, 3));', 'const quadrado = x => x * x;', 'const listar = () => console.log("Lista");']
            },
    
            // N√çVEL 12 - M√âTODOS DE ARRAY
            {
                story: "üîß Incr√≠vel! Vamos dominar manipula√ß√£o avan√ßada de arrays.\n\nD√©cimo Segundo Desafio: Use m√©todos modernos! Com o array '[1, 2, 3, 4, 5]', use 'numeros.map(x => x * 2)' para dobrar todos os valores e 'filter(x => x > 6)' para filtrar os maiores que 6.",
                concept: "M√©todos de Array",
                explanation: "M√âTODOS DE ARRAY s√£o superpoderes para listas! map() transforma elementos, filter() filtra por condi√ß√£o, reduce() combina elementos. √â programa√ß√£o funcional e muito poderosa!",
                solution: ['let numeros = [1, 2, 3, 4, 5];', 'let dobrados = numeros.map(x => x * 2);', 'let filtrados = dobrados.filter(x => x > 6);', 'console.log(filtrados);'],
                success: "üöÄ Sensacional! Voc√™ dominou m√©todos modernos de array!\n\nEsses m√©todos s√£o essenciais no JavaScript moderno. Agora voc√™ pode manipular dados de forma elegante e funcional!",
                commands: ['let numeros = [1, 2, 3, 4, 5];', 'let dobrados = numeros.map(x => x * 2);', 'let filtrados = dobrados.filter(x => x > 6);', 'console.log(filtrados);', 'numeros.forEach(x => console.log(x));']
            },
    
            // N√çVEL 13 - DESTRUCTURING
            {
                story: "üì¶ Fant√°stico! Vamos desempacotar dados de forma elegante.\n\nD√©cimo Terceiro Desafio: Use destructuring! Com 'let pessoa = {nome: \"Ana\", idade: 25}', extraia as propriedades usando 'let {nome, idade} = pessoa' e exiba no console.",
                concept: "Destructuring",
                explanation: "DESTRUCTURING extrai valores de objetos e arrays de forma elegante! Em vez de pessoa.nome, voc√™ pode usar {nome} = pessoa. √â sintaxe moderna que torna o c√≥digo mais limpo!",
                solution: ['let pessoa = {nome: "Ana", idade: 25};', 'let {nome, idade} = pessoa;', 'console.log(nome, idade);'],
                success: "‚ú® Perfeito! Voc√™ dominou destructuring!\n\nDestructuring √© uma das funcionalidades mais elegantes do JavaScript moderno. C√≥digo mais limpo e leg√≠vel!",
                commands: ['let pessoa = {nome: "Ana", idade: 25};', 'let {nome, idade} = pessoa;', 'console.log(nome, idade);', 'let [a, b] = [1, 2];', 'let {nome: nomeCompleto} = pessoa;']
            },
    
            // N√çVEL 14 - TEMPLATE LITERALS
            {
                story: "üí¨ Excelente! Vamos criar strings din√¢micas modernas.\n\nD√©cimo Quarto Desafio: Use template literals! Crie uma mensagem din√¢mica com 'let nome = \"Jo√£o\"' e 'let mensagem = `Ol√°, ${nome}! Voc√™ tem ${2 + 3} moedas.`'",
                concept: "Template Literals",
                explanation: "TEMPLATE LITERALS usam crases (`) e ${} para interpolar vari√°veis! Muito mais poderoso que concatena√ß√£o com +. Permite m√∫ltiplas linhas e express√µes complexas!",
                solution: ['let nome = "Jo√£o";', 'let moedas = 5;', 'let mensagem = `Ol√°, ${nome}! Voc√™ tem ${moedas} moedas.`;', 'console.log(mensagem);'],
                success: "üìù Incr√≠vel! Voc√™ modernizou a cria√ß√£o de strings!\n\nTemplate literals s√£o muito mais poderosos e leg√≠veis que concatena√ß√£o tradicional. JavaScript moderno em a√ß√£o!",
                commands: ['let nome = "Jo√£o";', 'let moedas = 5;', 'let mensagem = `Ol√°, ${nome}! Voc√™ tem ${moedas} moedas.`;', 'console.log(mensagem);', 'let multiline = `Linha 1\nLinha 2`;']
            },
    
            // N√çVEL 15 - PROMISES
            {
                story: "‚è≥ Sensacional! Vamos trabalhar com c√≥digo ass√≠ncrono.\n\nD√©cimo Quinto Desafio: Crie uma Promise! Use 'new Promise((resolve, reject) => { setTimeout(() => resolve(\"Sucesso!\"), 1000); })' e consuma com '.then()'.",
                concept: "Promises",
                explanation: "PROMISES lidam com opera√ß√µes ass√≠ncronas! Como pedidos que levam tempo para completar. resolve() para sucesso, reject() para erro, .then() para quando completar. Essencial para APIs!",
                solution: ['let promessa = new Promise((resolve, reject) => {', 'setTimeout(() => resolve("Miss√£o completa!"), 1000);', '});', 'promessa.then(resultado => console.log(resultado));'],
                success: "‚ö° Fant√°stico! Voc√™ dominou programa√ß√£o ass√≠ncrona!\n\nPromises s√£o fundamentais no JavaScript moderno. Agora voc√™ pode lidar com APIs, arquivos e opera√ß√µes que levam tempo!",
                commands: ['let promessa = new Promise((resolve, reject) => {', 'setTimeout(() => resolve("Miss√£o completa!"), 1000);', '});', 'promessa.then(resultado => console.log(resultado));', '.catch(erro => console.log(erro));']
            },
    
            // N√çVEL 16 - ASYNC/AWAIT
            {
                story: "üöÄ Perfeito! Vamos simplificar c√≥digo ass√≠ncrono.\n\nD√©cimo Sexto Desafio: Use async/await! Crie 'async function buscarDados() { let resultado = await promessa; return resultado; }' e chame a fun√ß√£o.",
                concept: "Async/Await",
                explanation: "ASYNC/AWAIT simplifica Promises! 'async' marca fun√ß√£o ass√≠ncrona, 'await' espera Promise resolver. C√≥digo ass√≠ncrono que parece s√≠ncrono - muito mais leg√≠vel!",
                solution: ['async function buscarDados() {', 'let promessa = new Promise(resolve => setTimeout(() => resolve("Dados!"), 500));', 'let resultado = await promessa;', 'return resultado;', '}', 'buscarDados().then(dados => console.log(dados));'],
                success: "‚≠ê Sensacional! Voc√™ simplificou c√≥digo ass√≠ncrono!\n\nAsync/await √© a forma mais moderna e limpa de lidar com opera√ß√µes ass√≠ncronas. C√≥digo mais leg√≠vel e maint√≠vel!",
                commands: ['async function buscarDados() {', 'let resultado = await promessa;', 'return resultado;', '}', 'buscarDados().then(dados => console.log(dados));', 'try { await operacao(); } catch(e) {}']
            },
    
            // N√çVEL 17 - CLASSES
            {
                story: "üèóÔ∏è Incr√≠vel! Vamos criar classes para organizar c√≥digo.\n\nD√©cimo S√©timo Desafio: Crie uma classe! 'class Heroi { constructor(nome) { this.nome = nome; } falar() { return `${this.nome} fala!`; } }' e instancie com 'new Heroi(\"Link\")'.",
                concept: "Classes",
                explanation: "CLASSES s√£o moldes para criar objetos! constructor() inicializa, m√©todos definem comportamentos. √â programa√ß√£o orientada a objetos - organiza√ß√£o avan√ßada de c√≥digo!",
                solution: ['class Heroi {', 'constructor(nome) {', 'this.nome = nome;', '}', 'falar() {', 'return `${this.nome} fala!`;', '}', '}', 'let heroi = new Heroi("Link");', 'console.log(heroi.falar());'],
                success: "üèõÔ∏è Fant√°stico! Voc√™ criou sua primeira classe!\n\nClasses organizam c√≥digo de forma profissional. Agora voc√™ pode criar estruturas complexas e reutiliz√°veis!",
                commands: ['class Heroi {', 'constructor(nome) {', 'this.nome = nome;', '}', 'falar() {', 'return `${this.nome} fala!`;', '}', '}', 'let heroi = new Heroi("Link");', 'console.log(heroi.falar());']
            },
    
            // N√çVEL 18 - MODULES
            {
                story: "üì¶ Excelente! Vamos modularizar o c√≥digo.\n\nD√©cimo Oitavo Desafio: Use m√≥dulos! Crie 'export const saudar = nome => `Ol√°, ${nome}!`' e depois 'import { saudar } from \"./modulo.js\"' para usar em outro arquivo.",
                concept: "M√≥dulos ES6",
                explanation: "M√ìDULOS organizam c√≥digo em arquivos separados! export exp√µe fun√ß√µes, import traz de outros arquivos. C√≥digo organizado, reutiliz√°vel e maint√≠vel. Padr√£o moderno!",
                solution: ['// No arquivo utils.js', 'export const saudar = nome => `Ol√°, ${nome}!`;', 'export const somar = (a, b) => a + b;', '', '// No arquivo principal', 'import { saudar, somar } from "./utils.js";', 'console.log(saudar("Mundo"));'],
                success: "üéØ Perfeito! Voc√™ modularizou seu c√≥digo!\n\nM√≥dulos s√£o essenciais em projetos grandes. C√≥digo organizado, test√°vel e reutiliz√°vel. Desenvolvimento profissional!",
                commands: ['export const saudar = nome => `Ol√°, ${nome}!`;', 'export const somar = (a, b) => a + b;', 'import { saudar } from "./utils.js";', 'export default class Heroi {}', 'import Heroi from "./heroi.js";']
            },
    
            // N√çVEL 19 - FETCH API
            {
                story: "üåê Sensacional! Vamos conectar com APIs externas.\n\nD√©cimo Nono Desafio: Use Fetch API! Crie 'fetch(\"https://jsonplaceholder.typicode.com/posts/1\").then(response => response.json()).then(data => console.log(data))' para buscar dados de uma API.",
                concept: "Fetch API",
                explanation: "FETCH API permite comunica√ß√£o com servidores! Busca dados de APIs, envia informa√ß√µes, trabalha com JSON. √â como seu c√≥digo conversar com o mundo exterior!",
                solution: ['fetch("https://jsonplaceholder.typicode.com/posts/1")', '.then(response => response.json())', '.then(data => {', 'console.log("T√≠tulo:", data.title);', 'console.log("Conte√∫do:", data.body);', '})'], 
                success: "üåç Incr√≠vel! Voc√™ conectou seu c√≥digo com o mundo exterior!\n\nFetch API √© essencial para aplica√ß√µes modernas. Agora voc√™ pode trabalhar com dados reais de qualquer lugar do mundo!",
                commands: ['fetch("https://jsonplaceholder.typicode.com/posts/1")', '.then(response => response.json())', '.then(data => console.log(data))', 'console.log("T√≠tulo:", data.title);', '.catch(error => console.log(error));']
            },
    
            // N√çVEL 20 - PROJETO FINAL AVAN√áADO
            {
                story: "üèÜ DESAFIO FINAL √âPICO!\n\nVoc√™ chegou ao √∫ltimo n√≠vel! Crie uma aplica√ß√£o completa que integre tudo: uma classe Gerenciador que use async/await para buscar dados, manipule o DOM, use eventos, template literals e m√≥dulos.\n\nMostre que voc√™ √© um mestre do JavaScript moderno!",
                concept: "Projeto Integrado Full-Stack",
                explanation: "PROJETO FINAL integra todos os conceitos avan√ßados! Classes, async/await, DOM manipulation, eventos, fetch API, template literals - tudo trabalhando em harmonia. √â o teste definitivo do seu dom√≠nio JavaScript!",
                solution: ['class AppManager {', 'constructor() {', 'this.dados = [];', 'this.initEvents();', '}', '', 'async fetchData() {', 'try {', 'const response = await fetch("https://jsonplaceholder.typicode.com/users");', 'this.dados = await response.json();', 'this.renderData();', '} catch (error) {', 'console.error("Erro:", error);', '}', '}', '', 'renderData() {', 'const container = document.getElementById("container");', 'container.innerHTML = this.dados.map(user => ', '`<div class="user-card">${user.name} - ${user.email}</div>`', ').join("");', '}', '', 'initEvents() {', 'document.getElementById("loadBtn").addEventListener("click", () => this.fetchData());', '}', '}', '', 'const app = new AppManager();'],
                success: "üéâüèÜ PARAB√âNS, MESTRE DO JAVASCRIPT! üèÜüéâ\n\nVoc√™ completou todos os 20 n√≠veis e se tornou um verdadeiro especialista em JavaScript! Dominou desde vari√°veis b√°sicas at√© aplica√ß√µes full-stack complexas.\n\nAgora voc√™ pode criar:\n‚Ä¢ Aplica√ß√µes web interativas\n‚Ä¢ APIs e integra√ß√µes\n‚Ä¢ C√≥digo modular e maint√≠vel\n‚Ä¢ Interfaces din√¢micas\n‚Ä¢ Programa√ß√£o ass√≠ncrona avan√ßada\n\nSeu conhecimento em JavaScript √© agora de n√≠vel S√äNIOR! üöÄ‚≠ê‚ú®",
                commands: ['class AppManager {', 'constructor() {', 'this.dados = [];', '}', 'async fetchData() {', 'const response = await fetch(url);', 'this.dados = await response.json();', '}', 'renderData() {', 'container.innerHTML = template;', '}', 'initEvents() {', 'btn.addEventListener("click", handler);', '}', '}', 'const app = new AppManager();']
            }
        ]
    },
    logic: {
        name: "L√≥gica de Programa√ß√£o",
        icon: "üß†",
        character: "ü§ñ",
        levels: [
            // N√çVEL 1 - COMANDOS B√ÅSICOS
            {
                story: "üß† Bem-vindo ao Reino da L√≥gica!\n\nVoc√™ √© um jovem programador aprendendo a pensar como um computador. Sua miss√£o √© dominar os fundamentos do pensamento computacional!\n\nPrimeiro Desafio: O rob√¥ precisa se mover para frente. Use o comando b√°sico 'mover()' para fazer ele dar um passo!",
                concept: "Comandos B√°sicos",
                explanation: "ALGORITMOS come√ßam com comandos simples! Cada instru√ß√£o faz o computador executar uma a√ß√£o espec√≠fica. √â como dar dire√ß√µes muito precisas para algu√©m que segue exatamente o que voc√™ fala.",
                solution: ['mover()'],
                success: "üéØ Perfeito! Voc√™ executou seu primeiro comando!\n\nPrograma√ß√£o √© sobre dar instru√ß√µes claras e precisas. Cada comando tem um prop√≥sito espec√≠fico e o computador os executa na ordem exata!",
                commands: ['mover()', 'pular()', 'pegar()', 'esperar()', 'virar_direita()']
            },
    
            // N√çVEL 2 - SEQU√äNCIA DE COMANDOS
            {
                story: "üéØ Excelente! Agora vamos criar uma sequ√™ncia de a√ß√µes.\n\nSegundo Desafio: O rob√¥ precisa pegar uma moeda que est√° √† frente! Execute a sequ√™ncia: mover para frente, depois pegar a moeda. Use 'mover()' seguido de 'pegar()'.",
                concept: "Sequ√™ncia de Comandos",
                explanation: "SEQU√äNCIA √© a ordem dos comandos! O computador executa um comando por vez, na ordem exata que voc√™ escreve. Como uma receita: primeiro fa√ßa isso, depois aquilo.",
                solution: ['mover()', 'pegar()'],
                success: "ü™ô Fant√°stico! Voc√™ criou sua primeira sequ√™ncia l√≥gica!\n\nSequ√™ncia √© um dos pilares da programa√ß√£o. A ordem dos comandos √© fundamental - mude a ordem e o resultado muda!",
                commands: ['mover()', 'pegar()', 'pular()', 'virar_direita()', 'virar_esquerda()']
            },
    
            // N√çVEL 3 - REPETI√á√ÉO SIMPLES
            {
                story: "üîÑ Incr√≠vel! Agora vamos automatizar tarefas repetitivas.\n\nTerceiro Desafio: H√° 3 moedas em linha reta. Em vez de escrever 'mover(), pegar()' tr√™s vezes, use 'repetir(3)' para executar os comandos 3 vezes automaticamente!",
                concept: "Repeti√ß√£o (Loops)",
                explanation: "REPETI√á√ÉO evita escrever o mesmo c√≥digo v√°rias vezes! 'repetir(X)' executa os comandos dentro dele X vezes. √â automa√ß√£o pura - deixe o computador fazer o trabalho pesado!",
                solution: ['repetir(3)', 'mover()', 'pegar()', 'fim_repetir'],
                success: "‚ö° Sensacional! Voc√™ automatizou uma tarefa repetitiva!\n\nLoops s√£o uma das ferramentas mais poderosas da programa√ß√£o. Eles fazem o computador trabalhar para voc√™, executando tarefas repetitivas sem erros!",
                commands: ['repetir(3)', 'mover()', 'pegar()', 'fim_repetir', 'virar_direita()']
            },
    
            // N√çVEL 4 - CONDI√á√ïES SIMPLES
            {
                story: "ü§î Perfeito! Vamos tomar decis√µes inteligentes.\n\nQuarto Desafio: H√° uma parede √† frente! O rob√¥ precisa verificar se pode andar. Use 'se(caminho_livre)' para verificar se o caminho est√° livre antes de mover.",
                concept: "Condi√ß√µes (If)",
                explanation: "CONDI√á√ïES fazem programas 'pensarem'! 'SE' uma condi√ß√£o for verdadeira, ENT√ÉO execute os comandos. √â como dar ao computador a capacidade de analisar situa√ß√µes!",
                solution: ['se(caminho_livre)', 'mover()', 'fim_se'],
                success: "üß© Excelente! Seu programa tomou uma decis√£o inteligente!\n\nCondi√ß√µes s√£o o que fazem programas parecerem 'inteligentes'. Eles analisam situa√ß√µes e escolhem a melhor a√ß√£o!",
                commands: ['se(caminho_livre)', 'mover()', 'fim_se', 'se(tem_moeda)', 'pegar()']
            },
    
            // N√çVEL 5 - IF/ELSE
            {
                story: "‚öñÔ∏è Fant√°stico! Vamos criar alternativas.\n\nQuinto Desafio: H√° duas portas - uma √† direita e outra √† esquerda. Se a porta direita estiver aberta, v√° por ela. Sen√£o, v√° pela esquerda. Use 'se...senao'!",
                concept: "Condi√ß√µes com Alternativa (If/Else)",
                explanation: "IF/ELSE oferece duas op√ß√µes! 'SE isso for verdade, ENT√ÉO fa√ßa aquilo, SEN√ÉO fa√ßa outra coisa'. √â como ter um plano A e um plano B sempre prontos!",
                solution: ['se(porta_direita_aberta)', 'virar_direita()', 'mover()', 'senao', 'virar_esquerda()', 'mover()', 'fim_se'],
                success: "üö™ Incr√≠vel! Seu programa sempre tem uma solu√ß√£o!\n\nIf/Else garante que seu programa sempre saiba o que fazer, independente da situa√ß√£o. Planejamento inteligente!",
                commands: ['se(porta_direita_aberta)', 'virar_direita()', 'mover()', 'senao', 'virar_esquerda()', 'fim_se']
            },
    
            // N√çVEL 6 - LOOPS COM CONDI√á√ïES
            {
                story: "üîç Sensacional! Vamos combinar repeti√ß√£o com decis√µes.\n\nSexto Desafio: Colete todas as moedas em um corredor! Use 'enquanto(tem_moeda)' para repetir 'pegar()' e 'mover()' at√© n√£o haver mais moedas.",
                concept: "Loops Condicionais (While)",
                explanation: "WHILE repete ENQUANTO uma condi√ß√£o for verdadeira! Diferente do 'repetir(X)', aqui n√£o sabemos quantas vezes vai repetir - depende da condi√ß√£o. √â repeti√ß√£o inteligente!",
                solution: ['enquanto(tem_moeda)', 'pegar()', 'mover()', 'fim_enquanto'],
                success: "üé∞ Perfeito! Voc√™ criou um loop adaptativo!\n\nWhile loops se adaptam √† situa√ß√£o. Eles param automaticamente quando a condi√ß√£o muda. Automa√ß√£o verdadeiramente inteligente!",
                commands: ['enquanto(tem_moeda)', 'pegar()', 'mover()', 'fim_enquanto', 'enquanto(caminho_livre)']
            },
    
            // N√çVEL 7 - VARI√ÅVEIS
            {
                story: "üìä Excelente! Vamos come√ßar a contar e memorizar.\n\nS√©timo Desafio: O rob√¥ precisa contar quantas moedas coletou! Crie uma vari√°vel 'moedas = 0', depois use 'moedas = moedas + 1' cada vez que pegar uma moeda.",
                concept: "Vari√°veis e Contadores",
                explanation: "VARI√ÅVEIS s√£o a 'mem√≥ria' do programa! Elas guardam informa√ß√µes que podem mudar. Um contador √© uma vari√°vel que aumenta de valor - como um placar que vai subindo!",
                solution: ['moedas = 0', 'repetir(3)', 'pegar()', 'moedas = moedas + 1', 'mover()', 'fim_repetir', 'mostrar(moedas)'],
                success: "üßÆ Fant√°stico! Seu programa agora tem mem√≥ria!\n\nVari√°veis transformam programas simples em sistemas inteligentes. Agora voc√™ pode contar, calcular e lembrar informa√ß√µes!",
                commands: ['moedas = 0', 'moedas = moedas + 1', 'mostrar(moedas)', 'repetir(3)', 'pegar()', 'mover()']
            },
    
            // N√çVEL 8 - FUN√á√ïES B√ÅSICAS
            {
                story: "üîß Incr√≠vel! Vamos organizar c√≥digo em blocos reutiliz√°veis.\n\nOitavo Desafio: Crie uma fun√ß√£o para coletar moeda! Defina 'funcao coletarMoeda()' que executa 'mover()' e 'pegar()', depois use 'coletarMoeda()' tr√™s vezes.",
                concept: "Fun√ß√µes B√°sicas",
                explanation: "FUN√á√ïES s√£o blocos de c√≥digo reutiliz√°veis! Como criar sua pr√≥pria ferramenta personalizada. Defina uma vez, use quantas vezes quiser. Organiza√ß√£o e reutiliza√ß√£o!",
                solution: ['funcao coletarMoeda()', 'mover()', 'pegar()', 'fim_funcao', 'repetir(3)', 'coletarMoeda()', 'fim_repetir'],
                success: "‚öôÔ∏è Sensacional! Voc√™ criou sua primeira ferramenta personalizada!\n\nFun√ß√µes organizam c√≥digo e evitam repeti√ß√£o. Agora voc√™ pode criar solu√ß√µes modulares e elegantes!",
                commands: ['funcao coletarMoeda()', 'mover()', 'pegar()', 'fim_funcao', 'coletarMoeda()', 'repetir(3)']
            },
    
            // N√çVEL 9 - PAR√ÇMETROS
            {
                story: "üìù Perfeito! Vamos tornar fun√ß√µes mais flex√≠veis.\n\nNono Desafio: Crie uma fun√ß√£o que recebe par√¢metros! Defina 'funcao moverX(passos)' que usa 'repetir(passos)' para mover uma quantidade vari√°vel de passos.",
                concept: "Fun√ß√µes com Par√¢metros",
                explanation: "PAR√ÇMETROS tornam fun√ß√µes flex√≠veis! Como vari√°veis que mudam cada vez que voc√™ chama a fun√ß√£o. Uma fun√ß√£o, m√∫ltiplas possibilidades. √â customiza√ß√£o inteligente!",
                solution: ['funcao moverX(passos)', 'repetir(passos)', 'mover()', 'fim_repetir', 'fim_funcao', 'moverX(5)', 'moverX(2)'],
                success: "üéõÔ∏è Incr√≠vel! Suas fun√ß√µes agora s√£o personaliz√°veis!\n\nPar√¢metros transformam fun√ß√µes r√≠gidas em ferramentas flex√≠veis. Uma fun√ß√£o pode resolver m√∫ltiplos problemas similares!",
                commands: ['funcao moverX(passos)', 'repetir(passos)', 'mover()', 'fim_funcao', 'moverX(5)', 'moverX(2)']
            },
    
            // N√çVEL 10 - L√ìGICA BOOLEANA
            {
                story: "üîç Fant√°stico! Vamos trabalhar com l√≥gica verdadeiro/falso.\n\nD√©cimo Desafio: Use operadores l√≥gicos! Se 'tem_chave E porta_fechada', ent√£o use a chave. Use 'se(tem_chave E porta_fechada)' para combinar condi√ß√µes.",
                concept: "L√≥gica Booleana (AND/OR)",
                explanation: "L√ìGICA BOOLEANA combina condi√ß√µes! 'E' (AND) - ambas devem ser verdade, 'OU' (OR) - pelo menos uma deve ser verdade. Como o c√©rebro humano analisa situa√ß√µes complexas!",
                solution: ['se(tem_chave E porta_fechada)', 'usar_chave()', 'abrir_porta()', 'fim_se', 'mover()'],
                success: "üß† Extraordin√°rio! Voc√™ dominou l√≥gica complexa!\n\nL√≥gica booleana permite an√°lises sofisticadas. Agora seus programas podem tomar decis√µes baseadas em m√∫ltiplas condi√ß√µes!",
                commands: ['se(tem_chave E porta_fechada)', 'usar_chave()', 'se(tem_moeda OU tem_gema)', 'abrir_porta()', 'fim_se']
            },
    
            // N√çVEL 11 - CONDI√á√ïES ANINHADAS
            {
                story: "üèóÔ∏è Excelente! Vamos criar decis√µes dentro de decis√µes.\n\nD√©cimo Primeiro Desafio: Navegue por um labirinto! Se o caminho da frente estiver livre, mova. Sen√£o, se a direita estiver livre, vire √† direita. Sen√£o, vire √† esquerda.",
                concept: "Condi√ß√µes Aninhadas (Nested If)",
                explanation: "CONDI√á√ïES ANINHADAS s√£o decis√µes dentro de decis√µes! Como um fluxograma complexo - se isso, ent√£o verifique aquilo, se n√£o, verifique outra coisa. L√≥gica em camadas!",
                solution: ['se(frente_livre)', 'mover()', 'senao', 'se(direita_livre)', 'virar_direita()', 'mover()', 'senao', 'virar_esquerda()', 'mover()', 'fim_se', 'fim_se'],
                success: "üéØ Sensacional! Voc√™ criou um sistema de decis√£o em camadas!\n\nCondi√ß√µes aninhadas permitem l√≥gica sofisticada. Seus programas agora podem navegar situa√ß√µes complexas!",
                commands: ['se(frente_livre)', 'mover()', 'senao', 'se(direita_livre)', 'virar_direita()', 'virar_esquerda()', 'fim_se']
            },
    
            // N√çVEL 12 - ARRAYS/LISTAS
            {
                story: "üìã Incr√≠vel! Vamos organizar m√∫ltiplos dados.\n\nD√©cimo Segundo Desafio: Crie um invent√°rio! Use 'inventario = [\"chave\", \"moeda\", \"gema\"]' para criar uma lista, depois use 'adicionar(inventario, \"po√ß√£o\")' para adicionar um item.",
                concept: "Listas/Arrays",
                explanation: "LISTAS guardam m√∫ltiplos valores organizados! Como uma mochila digital com compartimentos numerados. Voc√™ pode adicionar, remover e acessar itens por posi√ß√£o!",
                solution: ['inventario = ["chave", "moeda", "gema"]', 'adicionar(inventario, "po√ß√£o")', 'mostrar(inventario)', 'mostrar(inventario[0])'],
                success: "üéí Perfeito! Voc√™ organizou dados em uma cole√ß√£o!\n\nListas s√£o fundamentais para gerenciar m√∫ltiplos dados. Agora voc√™ pode trabalhar com cole√ß√µes de informa√ß√µes!",
                commands: ['inventario = ["chave", "moeda"]', 'adicionar(inventario, "po√ß√£o")', 'mostrar(inventario)', 'mostrar(inventario[0])', 'remover(inventario, 0)']
            },
    
            // N√çVEL 13 - LOOPS COM ARRAYS
            {
                story: "üîÑ Fant√°stico! Vamos processar listas automaticamente.\n\nD√©cimo Terceiro Desafio: Examine cada item do invent√°rio! Use 'para cada item em inventario' para percorrer a lista e mostrar cada item individualmente.",
                concept: "Itera√ß√£o em Listas",
                explanation: "ITERA√á√ÉO percorre cada elemento de uma lista automaticamente! Como examinar cada gaveta de uma c√¥moda. 'Para cada' √© perfeito para processar cole√ß√µes completas!",
                solution: ['inventario = ["espada", "escudo", "po√ß√£o"]', 'para cada item em inventario', 'mostrar(item)', 'fim_para'],
                success: "üîç Incr√≠vel! Voc√™ automatizou o processamento de listas!\n\nItera√ß√£o √© essencial para trabalhar com cole√ß√µes. Agora voc√™ pode processar qualquer quantidade de dados automaticamente!",
                commands: ['inventario = ["espada", "escudo", "po√ß√£o"]', 'para cada item em inventario', 'mostrar(item)', 'fim_para', 'contar(inventario)']
            },
    
            // N√çVEL 14 - BUSCA EM LISTAS
            {
                story: "üîç Sensacional! Vamos procurar itens espec√≠ficos.\n\nD√©cimo Quarto Desafio: Verifique se voc√™ tem uma chave! Use 'se(contem(inventario, \"chave\"))' para verificar se um item espec√≠fico est√° na lista antes de us√°-lo.",
                concept: "Busca e Verifica√ß√£o",
                explanation: "BUSCA encontra elementos espec√≠ficos em listas! Como procurar um livro espec√≠fico numa biblioteca. Verificar antes de usar evita erros e torna programas mais robustos!",
                solution: ['inventario = ["moeda", "chave", "gema"]', 'se(contem(inventario, "chave"))', 'mostrar("Tenho chave!")', 'usar_chave()', 'senao', 'mostrar("Preciso encontrar chave")', 'fim_se'],
                success: "üóùÔ∏è Perfeito! Seu programa agora faz verifica√ß√µes inteligentes!\n\nBusca em listas √© fundamental para programas robustos. Sempre verifique antes de usar - preven√ß√£o de erros!",
                commands: ['inventario = ["moeda", "chave", "gema"]', 'se(contem(inventario, "chave"))', 'mostrar("Tenho chave!")', 'usar_chave()', 'senao', 'fim_se']
            },
    
            // N√çVEL 15 - ALGORITMOS DE ORDENA√á√ÉO
            {
                story: "üìä Excelente! Vamos organizar dados em ordem.\n\nD√©cimo Quinto Desafio: Ordene uma lista de n√∫meros! Use 'ordenar(numeros)' para organizar a lista '[5, 2, 8, 1, 9]' em ordem crescente.",
                concept: "Ordena√ß√£o",
                explanation: "ORDENA√á√ÉO organiza dados em sequ√™ncia l√≥gica! Como organizar cartas por valor ou livros por ordem alfab√©tica. Dados organizados s√£o mais f√°ceis de processar e encontrar!",
                solution: ['numeros = [5, 2, 8, 1, 9]', 'mostrar("Antes:", numeros)', 'ordenar(numeros)', 'mostrar("Depois:", numeros)'],
                success: "üìà Fant√°stico! Voc√™ organizou dados perfeitamente!\n\nOrdena√ß√£o √© um algoritmo fundamental. Dados organizados permitem buscas mais r√°pidas e an√°lises mais eficientes!",
                commands: ['numeros = [5, 2, 8, 1, 9]', 'mostrar("Antes:", numeros)', 'ordenar(numeros)', 'mostrar("Depois:", numeros)', 'reverter(numeros)']
            },
    
            // N√çVEL 16 - RECURS√ÉO B√ÅSICA
            {
                story: "üåÄ Incr√≠vel! Vamos criar fun√ß√µes que chamam a si mesmas.\n\nD√©cimo Sexto Desafio: Conte regressivamente! Crie uma fun√ß√£o 'contagem(n)' que mostra o n√∫mero e chama 'contagem(n-1)' at√© chegar a zero.",
                concept: "Recurs√£o",
                explanation: "RECURS√ÉO √© quando uma fun√ß√£o chama a si mesma! Como ecos que v√£o diminuindo ou bonecas russas dentro de bonecas. Poderosa para problemas que se dividem em vers√µes menores!",
                solution: ['funcao contagem(n)', 'se(n > 0)', 'mostrar(n)', 'contagem(n - 1)', 'senao', 'mostrar("Fim!")', 'fim_se', 'fim_funcao', 'contagem(5)'],
                success: "üåÄ Sensacional! Voc√™ dominou o conceito de recurs√£o!\n\nRecurs√£o √© um conceito avan√ßado e poderoso. Permite resolver problemas complexos dividindo-os em vers√µes menores!",
                commands: ['funcao contagem(n)', 'se(n > 0)', 'mostrar(n)', 'contagem(n - 1)', 'senao', 'mostrar("Fim!")', 'fim_funcao', 'contagem(5)']
            },
    
            // N√çVEL 17 - ESTRUTURAS CONDICIONAIS COMPLEXAS
            {
                story: "üéØ Perfeito! Vamos criar sistemas de decis√£o avan√ßados.\n\nD√©cimo S√©timo Desafio: Sistema de classifica√ß√£o! Use 'escolha(pontos)' com m√∫ltiplas op√ß√µes: 'caso >= 90: \"Excelente\"', 'caso >= 70: \"Bom\"', 'caso padr√£o: \"Regular\"'.",
                concept: "Switch/Case",
                explanation: "SWITCH/CASE √© uma forma elegante de lidar com m√∫ltiplas op√ß√µes! Em vez de muitos if/else, voc√™ usa 'escolha' com v√°rios 'caso'. Como um menu de op√ß√µes organizadas!",
                solution: ['pontos = 85', 'escolha(pontos)', 'caso >= 90:', 'mostrar("Excelente!")', 'caso >= 70:', 'mostrar("Bom!")', 'caso >= 50:', 'mostrar("Regular")', 'caso padr√£o:', 'mostrar("Precisa melhorar")', 'fim_escolha'],
                success: "üèÜ Incr√≠vel! Voc√™ criou um sistema de classifica√ß√£o elegante!\n\nSwitch/case torna c√≥digo com m√∫ltiplas condi√ß√µes mais limpo e leg√≠vel. Organiza√ß√£o √© fundamental!",
                commands: ['pontos = 85', 'escolha(pontos)', 'caso >= 90:', 'mostrar("Excelente!")', 'caso >= 70:', 'caso padr√£o:', 'fim_escolha']
            },
    
            // N√çVEL 18 - ALGORITMOS DE BUSCA
            {
                story: "üîç Fant√°stico! Vamos implementar busca eficiente.\n\nD√©cimo Oitavo Desafio: Busca bin√°ria! Em uma lista ordenada '[1,3,5,7,9,11,13]', implemente busca que divide a lista pela metade a cada tentativa para encontrar o n√∫mero 7.",
                concept: "Busca Bin√°ria",
                explanation: "BUSCA BIN√ÅRIA √© super eficiente em listas ordenadas! Em vez de verificar item por item, voc√™ divide pela metade e elimina metade das op√ß√µes a cada tentativa. Como jogar 'maior ou menor'!",
                solution: ['lista = [1,3,5,7,9,11,13]', 'alvo = 7', 'inicio = 0', 'fim = tamanho(lista) - 1', 'enquanto(inicio <= fim)', 'meio = (inicio + fim) / 2', 'se(lista[meio] == alvo)', 'mostrar("Encontrado na posi√ß√£o:", meio)', 'parar', 'senao_se(lista[meio] < alvo)', 'inicio = meio + 1', 'senao', 'fim = meio - 1', 'fim_se', 'fim_enquanto'],
                success: "üéØ Extraordin√°rio! Voc√™ implementou um algoritmo de busca eficiente!\n\nBusca bin√°ria √© muito mais r√°pida que busca linear. Em 1 milh√£o de itens, encontra em no m√°ximo 20 tentativas!",
                commands: ['lista = [1,3,5,7,9,11,13]', 'alvo = 7', 'inicio = 0', 'fim = tamanho(lista) - 1', 'meio = (inicio + fim) / 2', 'se(lista[meio] == alvo)', 'parar', 'senao_se(lista[meio] < alvo)']
            },
    
            // N√çVEL 19 - ESTRUTURAS DE DADOS AVAN√áADAS
            {
                story: "üèóÔ∏è Sensacional! Vamos trabalhar com estruturas de dados complexas.\n\nD√©cimo Nono Desafio: Crie um sistema de filas! Implemente 'fila = nova_fila()', 'enfilar(fila, \"cliente1\")', 'desenfilar(fila)' para simular uma fila de atendimento.",
                concept: "Filas e Pilhas",
                explanation: "FILAS e PILHAS s√£o estruturas especiais! Fila √© 'primeiro a entrar, primeiro a sair' (como fila do banco). Pilha √© '√∫ltimo a entrar, primeiro a sair' (como pilha de pratos). Cada uma tem seu uso ideal!",
                solution: ['fila = nova_fila()', 'enfilar(fila, "cliente1")', 'enfilar(fila, "cliente2")', 'enfilar(fila, "cliente3")', 'mostrar("Atendendo:", desenfilar(fila))', 'mostrar("Pr√≥ximo:", frente(fila))', 'mostrar("Tamanho da fila:", tamanho(fila))'],
                success: "üé™ Incr√≠vel! Voc√™ dominou estruturas de dados avan√ßadas!\n\nFilas e pilhas s√£o fundamentais em programa√ß√£o. Sistemas operacionais, navegadores e jogos usam essas estruturas constantemente!",
                commands: ['fila = nova_fila()', 'enfilar(fila, "cliente1")', 'desenfilar(fila)', 'pilha = nova_pilha()', 'empilhar(pilha, "item")', 'desempilhar(pilha)', 'frente(fila)']
            },
    
            // N√çVEL 20 - PROJETO FINAL ALGOR√çTMICO
            {
                story: "üèÜ DESAFIO FINAL √âPICO!\n\nVoc√™ chegou ao √∫ltimo n√≠vel! Crie um sistema completo de gerenciamento de tarefas que integre tudo: use listas para armazenar tarefas, fun√ß√µes para organizar c√≥digo, loops para processar, condi√ß√µes para validar, e algoritmos de ordena√ß√£o para priorizar.\n\nMostre que voc√™ √© um mestre da l√≥gica computacional!",
                concept: "Sistema Algor√≠tmico Completo",
                explanation: "PROJETO FINAL integra todos os conceitos de l√≥gica! Listas, fun√ß√µes, loops, condi√ß√µes, busca, ordena√ß√£o, filas - tudo trabalhando em harmonia. √â o teste definitivo do seu pensamento computacional!",
                solution: ['// Sistema de Gerenciamento de Tarefas', 'tarefas = []', 'fila_prioridade = nova_fila()', '', 'funcao adicionarTarefa(nome, prioridade)', 'nova_tarefa = {nome: nome, prioridade: prioridade, concluida: falso}', 'adicionar(tarefas, nova_tarefa)', 'se(prioridade >= 8)', 'enfilar(fila_prioridade, nova_tarefa)', 'fim_se', 'fim_funcao', '', 'funcao processarTarefas()', 'ordenar_por(tarefas, "prioridade")', 'para cada tarefa em tarefas', 'se(N√ÉO tarefa.concluida)', 'mostrar("Executando:", tarefa.nome)', 'tarefa.concluida = verdadeiro', 'fim_se', 'fim_para', 'fim_funcao', '', 'funcao relat√≥rio()', 'concluidas = 0', 'para cada tarefa em tarefas', 'se(tarefa.concluida)', 'concluidas = concluidas + 1', 'fim_se', 'fim_para', 'mostrar("Tarefas conclu√≠das:", concluidas, "de", tamanho(tarefas))', 'fim_funcao', '', '// Execu√ß√£o do sistema', 'adicionarTarefa("Estudar algoritmos", 9)', 'adicionarTarefa("Fazer compras", 5)', 'adicionarTarefa("Exercitar-se", 7)', 'processarTarefas()', 'relat√≥rio()'],
                success: "üéâüèÜ PARAB√âNS, MESTRE DA L√ìGICA! üèÜüéâ\n\nVoc√™ completou todos os 20 n√≠veis e se tornou um verdadeiro especialista em L√≥gica de Programa√ß√£o! Dominou desde comandos b√°sicos at√© algoritmos complexos.\n\nAgora voc√™ pode:\n‚Ä¢ Resolver problemas complexos sistematicamente\n‚Ä¢ Criar algoritmos eficientes\n‚Ä¢ Estruturar dados de forma inteligente\n‚Ä¢ Implementar busca e ordena√ß√£o\n‚Ä¢ Usar recurs√£o e estruturas avan√ßadas\n‚Ä¢ Pensar como um computador!\n\nSeu pensamento computacional √© agora de n√≠vel EXPERT! üß†üöÄ‚ú®",
                commands: ['tarefas = []', 'funcao adicionarTarefa(nome, prioridade)', 'nova_tarefa = {nome: nome, prioridade: prioridade}', 'adicionar(tarefas, nova_tarefa)', 'fim_funcao', 'funcao processarTarefas()', 'ordenar_por(tarefas, "prioridade")', 'para cada tarefa em tarefas', 'mostrar("Executando:", tarefa.nome)', 'fim_para', 'funcao relat√≥rio()', 'concluidas = 0', 'se(tarefa.concluida)', 'concluidas = concluidas + 1', 'adicionarTarefa("Estudar", 9)', 'processarTarefas()']
            }
        ]
    },
    css: {
        name: "CSS & Design",
        icon: "üé®",
        character: "üé®",
        levels: [
            // N√çVEL 1 - FUNDAMENTOS
            {
                story: "üé® Bem-vindo ao Reino do Design!\n\nVoc√™ √© um designer web aprendendo a criar experi√™ncias visuais incr√≠veis! Sua miss√£o √© dominar CSS, a linguagem que deixa a web bonita.\n\nPrimeiro Desafio: O her√≥i precisa de estilo! Use um seletor CSS para dar cor vermelha ao texto do elemento 'heroi'.",
                concept: "Seletores B√°sicos",
                explanation: "SELETORES s√£o como voc√™ escolhe elementos HTML para estilizar! Eles s√£o a ponte entre seu CSS e os elementos da p√°gina. # para IDs, . para classes, e o nome da tag para elementos.",
                solution: ['#heroi {', 'color: red;', '}'],
                success: "üåà Perfeito! Voc√™ deu vida ao seu primeiro elemento!\n\nSeletores s√£o fundamentais no CSS. Eles permitem escolher exatamente quais elementos voc√™ quer estilizar na p√°gina!",
                commands: ['#heroi {', '}', 'color: red;', '.classe {', 'background: blue;', 'h1 {']
            },
            
            // N√çVEL 2 - CORES E FUNDOS
            {
                story: "üåü Excelente! Agora vamos trabalhar com cores avan√ßadas.\n\nSegundo Desafio: Crie um fundo gradiente vibrante! Use 'background: linear-gradient()' para criar um gradiente do azul para o roxo no container principal.",
                concept: "Cores e Gradientes",
                explanation: "GRADIENTES criam transi√ß√µes suaves entre cores! linear-gradient() cria gradientes lineares, e voc√™ pode especificar dire√ß√£o e m√∫ltiplas cores. √â como pintar com degrad√™s digitais!",
                solution: ['.container {', 'background: linear-gradient(45deg, blue, purple);', '}'],
                success: "üé® Sensacional! Voc√™ criou um fundo com gradiente profissional!\n\nGradientes s√£o fundamentais no design moderno. Eles adicionam profundidade e eleg√¢ncia aos layouts!",
                commands: ['.container {', '}', 'background: linear-gradient(45deg, blue, purple);', 'background: radial-gradient(circle, red, yellow);', 'color: #ff6b6b;']
            },
    
            // N√çVEL 3 - TIPOGRAFIA
            {
                story: "üìù Incr√≠vel! Agora vamos dar personalidade ao texto.\n\nTerceiro Desafio: Estilize o t√≠tulo principal! Use 'font-family', 'font-size: 2em' e 'font-weight: bold' para criar um t√≠tulo impactante.",
                concept: "Tipografia",
                explanation: "TIPOGRAFIA √© a arte de estilizar texto! font-family define a fonte, font-size o tamanho, font-weight o peso. A tipografia transmite personalidade e hierarquia visual!",
                solution: ['h1 {', 'font-family: Arial, sans-serif;', 'font-size: 2em;', 'font-weight: bold;', '}'],
                success: "‚úçÔ∏è Fant√°stico! Seu texto agora tem personalidade pr√≥pria!\n\nTipografia bem trabalhada faz toda a diferen√ßa na comunica√ß√£o visual. Voc√™ dominou os fundamentos!",
                commands: ['h1 {', '}', 'font-family: Arial, sans-serif;', 'font-size: 2em;', 'font-weight: bold;', 'text-align: center;']
            },
    
            // N√çVEL 4 - BOX MODEL
            {
                story: "üì¶ Perfeito! Agora vamos entender o espa√ßamento.\n\nQuarto Desafio: Crie um cart√£o bem espa√ßado! Use 'padding: 20px' para espa√ßo interno, 'margin: 10px' para espa√ßo externo e 'border: 2px solid black' para uma borda.",
                concept: "Box Model",
                explanation: "BOX MODEL √© como CSS v√™ cada elemento! Margin (espa√ßo externo), Border (borda), Padding (espa√ßo interno) e Content (conte√∫do). √â fundamental para layouts organizados!",
                solution: ['.card {', 'padding: 20px;', 'margin: 10px;', 'border: 2px solid black;', '}'],
                success: "üìè Excelente! Voc√™ dominou o espa√ßamento de elementos!\n\nO Box Model √© a base de todo layout CSS. Agora voc√™ pode controlar precisamente o espa√ßo dos seus elementos!",
                commands: ['.card {', '}', 'padding: 20px;', 'margin: 10px;', 'border: 2px solid black;', 'border-radius: 10px;']
            },
    
            // N√çVEL 5 - FLEXBOX B√ÅSICO
            {
                story: "üèóÔ∏è Incr√≠vel! Agora vamos organizar o layout.\n\nQuinto Desafio: Crie um container flex√≠vel! Use 'display: flex' para organizar elementos lado a lado e 'justify-content: center' para centraliz√°-los horizontalmente.",
                concept: "Flexbox - B√°sico",
                explanation: "FLEXBOX √© um sistema de layout poderoso! display: flex transforma o container em flex√≠vel, justify-content alinha horizontalmente. √â como ter superpoderes para organizar elementos!",
                solution: ['.container {', 'display: flex;', 'justify-content: center;', '}'],
                success: "üìê Sensacional! Voc√™ criou um layout flex√≠vel e moderno!\n\nFlexbox revolucionou como fazemos layouts na web. Agora seus elementos se organizam de forma inteligente!",
                commands: ['.container {', '}', 'display: flex;', 'justify-content: center;', 'align-items: center;', 'flex-direction: column;']
            },
    
            // N√çVEL 6 - FLEXBOX AVAN√áADO
            {
                story: "üéØ Fant√°stico! Vamos aprofundar no Flexbox.\n\nSexto Desafio: Crie um layout responsivo! Use 'flex-wrap: wrap' para quebrar linhas automaticamente e 'gap: 20px' para espa√ßamento uniforme entre os itens.",
                concept: "Flexbox - Avan√ßado",
                explanation: "FLEXBOX AVAN√áADO permite layouts responsivos! flex-wrap permite quebra de linha, gap cria espa√ßamento uniforme, flex-grow controla crescimento. √â design responsivo inteligente!",
                solution: ['.container {', 'display: flex;', 'flex-wrap: wrap;', 'gap: 20px;', '}'],
                success: "üöÄ Incr√≠vel! Seu layout agora √© totalmente responsivo!\n\nVoc√™ dominou Flexbox avan√ßado! Seus layouts se adaptam automaticamente a diferentes tamanhos de tela!",
                commands: ['.container {', '}', 'display: flex;', 'flex-wrap: wrap;', 'gap: 20px;', 'align-content: center;']
            },
    
            // N√çVEL 7 - POSICIONAMENTO
            {
                story: "üìç Excelente! Agora vamos posicionar elementos precisamente.\n\nS√©timo Desafio: Crie um elemento flutuante! Use 'position: absolute', 'top: 50px' e 'right: 20px' para posicionar um bot√£o no canto superior direito.",
                concept: "Posicionamento",
                explanation: "POSICIONAMENTO controla onde elementos aparecem! absolute remove do fluxo normal, relative posiciona relativamente, fixed fica fixo na tela. √â controle total sobre a localiza√ß√£o!",
                solution: ['.botao {', 'position: absolute;', 'top: 50px;', 'right: 20px;', '}'],
                success: "üéØ Perfeito! Voc√™ posicionou o elemento exatamente onde queria!\n\nPosicionamento CSS d√° controle total sobre a localiza√ß√£o dos elementos. Essencial para layouts complexos!",
                commands: ['.botao {', '}', 'position: absolute;', 'top: 50px;', 'right: 20px;', 'z-index: 10;']
            },
    
            // N√çVEL 8 - TRANSFORMA√á√ïES
            {
                story: "üîÑ Sensacional! Vamos adicionar transforma√ß√µes din√¢micas.\n\nOitavo Desafio: Fa√ßa o her√≥i girar! Use 'transform: rotate(45deg)' para rotacionar o elemento e 'transform-origin: center' para definir o ponto de rota√ß√£o.",
                concept: "Transforma√ß√µes 2D",
                explanation: "TRANSFORMA√á√ïES modificam elementos sem afetar o layout! rotate() gira, scale() redimensiona, translate() move. √â como manipular objetos no espa√ßo digital!",
                solution: ['.heroi {', 'transform: rotate(45deg);', 'transform-origin: center;', '}'],
                success: "üåÄ Incr√≠vel! Voc√™ criou uma transforma√ß√£o suave e profissional!\n\nTransforma√ß√µes CSS permitem efeitos visuais impressionantes sem JavaScript. Seu elemento ganhou vida!",
                commands: ['.heroi {', '}', 'transform: rotate(45deg);', 'transform: scale(1.2);', 'transform-origin: center;']
            },
    
            // N√çVEL 9 - ANIMA√á√ïES B√ÅSICAS
            {
                story: "‚ú® Fant√°stico! Agora vamos criar movimento.\n\nNono Desafio: Crie uma anima√ß√£o pulsante! Use '@keyframes pulsar' com 'transform: scale(1)' no 0% e 'transform: scale(1.1)' no 50%, depois aplique com 'animation: pulsar 2s infinite'.",
                concept: "Anima√ß√µes B√°sicas",
                explanation: "ANIMA√á√ïES CSS criam movimento fluido! @keyframes define os passos da anima√ß√£o, animation aplica ela ao elemento. √â como dar vida aos seus designs sem JavaScript!",
                solution: ['@keyframes pulsar {', '0% { transform: scale(1); }', '50% { transform: scale(1.1); }', '100% { transform: scale(1); }', '}', '.heroi { animation: pulsar 2s infinite; }'],
                success: "üé≠ Sensacional! Voc√™ criou uma anima√ß√£o suave e cativante!\n\nAnima√ß√µes CSS s√£o o que fazem sites modernos se destacarem. Voc√™ agora pode criar experi√™ncias visuais envolventes!",
                commands: ['@keyframes pulsar {', '0% { transform: scale(1); }', '50% { transform: scale(1.1); }', '100% { transform: scale(1); }', '}', '.heroi { animation: pulsar 2s infinite; }']
            },
    
            // N√çVEL 10 - HOVER EFFECTS
            {
                story: "üëÜ Incr√≠vel! Vamos criar interatividade com hover.\n\nD√©cimo Desafio: Crie um efeito hover elegante! Use ':hover' para mudar a cor de fundo para azul e adicione 'transition: all 0.3s ease' para suavizar a mudan√ßa.",
                concept: "Efeitos Hover",
                explanation: "HOVER EFFECTS respondem √† intera√ß√£o do usu√°rio! :hover ativa quando o mouse passa sobre o elemento, transition suaviza mudan√ßas. √â interatividade visual pura!",
                solution: ['.botao {', 'background: gray;', 'transition: all 0.3s ease;', '}', '.botao:hover {', 'background: blue;', '}'],
                success: "üñ±Ô∏è Perfeito! Seu elemento agora responde ao mouse de forma elegante!\n\nEfeitos hover s√£o essenciais para boa experi√™ncia do usu√°rio. Voc√™ criou interatividade visual profissional!",
                commands: ['.botao {', '}', 'background: gray;', 'transition: all 0.3s ease;', '.botao:hover {', 'background: blue;']
            },
    
            // N√çVEL 11 - CSS GRID B√ÅSICO
            {
                story: "üì± Fant√°stico! Vamos dominar o Grid Layout.\n\nD√©cimo Primeiro Desafio: Crie uma grade de 3 colunas! Use 'display: grid', 'grid-template-columns: repeat(3, 1fr)' e 'gap: 15px' para criar um layout em grade uniforme.",
                concept: "CSS Grid - B√°sico",
                explanation: "CSS GRID √© o sistema de layout 2D mais poderoso! Permite criar grades complexas com linhas e colunas. 1fr significa 'uma fra√ß√£o', dividindo o espa√ßo igualmente!",
                solution: ['.grid {', 'display: grid;', 'grid-template-columns: repeat(3, 1fr);', 'gap: 15px;', '}'],
                success: "üèóÔ∏è Sensacional! Voc√™ criou um layout em grade perfeito!\n\nCSS Grid √© o futuro dos layouts web. Agora voc√™ pode criar estruturas complexas com facilidade!",
                commands: ['.grid {', '}', 'display: grid;', 'grid-template-columns: repeat(3, 1fr);', 'gap: 15px;', 'grid-template-rows: auto;']
            },
    
            // N√çVEL 12 - CSS GRID AVAN√áADO
            {
                story: "üéØ Excelente! Vamos criar layouts complexos com Grid.\n\nD√©cimo Segundo Desafio: Crie um layout de blog! Use 'grid-template-areas' para definir √°reas nomeadas: 'header header' na primeira linha e 'sidebar content' na segunda.",
                concept: "CSS Grid - Avan√ßado",
                explanation: "GRID AREAS permitem layouts nomeados e intuitivos! Voc√™ desenha o layout com strings e depois atribui elementos √†s √°reas. √â como desenhar com c√≥digo!",
                solution: ['.layout {', 'display: grid;', 'grid-template-areas:', '"header header"', '"sidebar content";', '}'],
                success: "üèõÔ∏è Incr√≠vel! Voc√™ criou um layout complexo com √°reas nomeadas!\n\nGrid Areas s√£o uma das funcionalidades mais elegantes do CSS. Layouts complexos agora s√£o intuitivos!",
                commands: ['.layout {', '}', 'display: grid;', 'grid-template-areas:', '"header header"', '"sidebar content";']
            },
    
            // N√çVEL 13 - RESPONSIVIDADE
            {
                story: "üì± Fant√°stico! Vamos fazer designs responsivos.\n\nD√©cimo Terceiro Desafio: Crie um breakpoint mobile! Use '@media (max-width: 768px)' para aplicar 'flex-direction: column' em telas menores que 768px.",
                concept: "Media Queries",
                explanation: "MEDIA QUERIES adaptam designs a diferentes dispositivos! Voc√™ pode aplicar estilos espec√≠ficos baseados no tamanho da tela, orienta√ß√£o, resolu√ß√£o. √â design para todos!",
                solution: ['@media (max-width: 768px) {', '.container {', 'flex-direction: column;', '}', '}'],
                success: "üì± Perfeito! Seu design agora se adapta a diferentes telas!\n\nResponsividade √© essencial hoje em dia. Voc√™ garantiu que seu design funciona em qualquer dispositivo!",
                commands: ['@media (max-width: 768px) {', '.container {', '}', 'flex-direction: column;', 'font-size: 14px;']
            },
    
            // N√çVEL 14 - PSEUDO-ELEMENTOS
            {
                story: "‚ú® Excelente! Vamos criar elementos decorativos.\n\nD√©cimo Quarto Desafio: Adicione um elemento decorativo! Use '::before' para criar um elemento decorativo, defina 'content: \"‚òÖ\"' e 'position: absolute' para posicion√°-lo.",
                concept: "Pseudo-elementos",
                explanation: "PSEUDO-ELEMENTOS criam elementos virtuais! ::before e ::after adicionam conte√∫do decorativo sem HTML extra. √â como magia CSS para detalhes visuais!",
                solution: ['.titulo::before {', 'content: \"‚òÖ\";', 'position: absolute;', 'left: -20px;', '}'],
                success: "‚≠ê Sensacional! Voc√™ adicionou elementos decorativos com CSS puro!\n\nPseudo-elementos s√£o uma ferramenta poderosa para detalhes visuais sem poluir o HTML!",
                commands: ['.titulo::before {', '}', 'content: \"‚òÖ\";', 'position: absolute;', 'left: -20px;', 'color: gold;']
            },
    
            // N√çVEL 15 - VARI√ÅVEIS CSS
            {
                story: "üé® Incr√≠vel! Vamos organizar com vari√°veis CSS.\n\nD√©cimo Quinto Desafio: Crie um sistema de cores! Use ':root' para definir '--cor-primaria: #3498db' e depois use 'color: var(--cor-primaria)' em um elemento.",
                concept: "Vari√°veis CSS",
                explanation: "VARI√ÅVEIS CSS (Custom Properties) permitem reutilizar valores! Defina uma vez e use em v√°rios lugares. Mudan√ßas ficam centralizadas e manuten√ß√£o fica muito mais f√°cil!",
                solution: [':root {', '--cor-primaria: #3498db;', '}', '.texto {', 'color: var(--cor-primaria);', '}'],
                success: "üîß Fant√°stico! Voc√™ criou um sistema de vari√°veis reutiliz√°veis!\n\nVari√°veis CSS tornam seus estilos mais organizados e f√°ceis de manter. √â programa√ß√£o aplicada ao design!",
                commands: [':root {', '}', '--cor-primaria: #3498db;', '.texto {', 'color: var(--cor-primaria);', '--tamanho: 16px;']
            },
    
            // N√çVEL 16 - FILTROS CSS
            {
                story: "üåà Perfeito! Vamos aplicar filtros visuais.\n\nD√©cimo Sexto Desafio: Adicione efeitos especiais! Use 'filter: blur(2px)' para desfocar um elemento e 'filter: brightness(1.2)' para deix√°-lo mais brilhante no hover.",
                concept: "Filtros CSS",
                explanation: "FILTROS CSS aplicam efeitos visuais como no Photoshop! blur(), brightness(), contrast(), grayscale() e muitos outros. √â edi√ß√£o de imagem direto no CSS!",
                solution: ['.imagem {', 'filter: blur(2px);', '}', '.imagem:hover {', 'filter: brightness(1.2);', '}'],
                success: "üé≠ Incr√≠vel! Voc√™ aplicou filtros profissionais com CSS puro!\n\nFiltros CSS oferecem possibilidades criativas infinitas. Seus elementos agora t√™m efeitos dignos de editores profissionais!",
                commands: ['.imagem {', '}', 'filter: blur(2px);', 'filter: brightness(1.2);', 'filter: grayscale(50%);', '.imagem:hover {']
            },
    
            // N√çVEL 17 - CLIP-PATH
            {
                story: "‚úÇÔ∏è Sensacional! Vamos criar formas customizadas.\n\nD√©cimo S√©timo Desafio: Recorte formas √∫nicas! Use 'clip-path: polygon(50% 0%, 0% 100%, 100% 100%)' para criar um tri√¢ngulo a partir de um elemento retangular.",
                concept: "Clip-path",
                explanation: "CLIP-PATH permite recortar elementos em formas personalizadas! C√≠rculos, pol√≠gonos, ellipses - voc√™ pode criar qualquer forma geom√©trica. √â escultura digital!",
                solution: ['.triangulo {', 'clip-path: polygon(50% 0%, 0% 100%, 100% 100%);', '}'],
                success: "üî∫ Fant√°stico! Voc√™ criou formas geom√©tricas personalizadas!\n\nClip-path abre um mundo de possibilidades criativas. Agora voc√™ pode criar designs √∫nicos e n√£o convencionais!",
                commands: ['.triangulo {', '}', 'clip-path: polygon(50% 0%, 0% 100%, 100% 100%);', 'clip-path: circle(50%);', 'clip-path: ellipse(25% 40%);']
            },
    
            // N√çVEL 18 - 3D TRANSFORMS
            {
                story: "üé™ Incr√≠vel! Vamos explorar a terceira dimens√£o.\n\nD√©cimo Oitavo Desafio: Crie profundidade 3D! Use 'transform: perspective(1000px) rotateY(45deg)' para rotacionar em 3D e 'transform-style: preserve-3d' no container.",
                concept: "Transforma√ß√µes 3D",
                explanation: "TRANSFORMA√á√ïES 3D adicionam profundidade real! perspective() define o ponto de vista, rotateX/Y/Z rotacionam nos eixos 3D. √â como ter um motor 3D no CSS!",
                solution: ['.container {', 'transform-style: preserve-3d;', '}', '.elemento {', 'transform: perspective(1000px) rotateY(45deg);', '}'],
                success: "üåü Extraordin√°rio! Voc√™ criou efeitos 3D impressionantes!\n\nTransforma√ß√µes 3D elevam seus designs a outro n√≠vel. Agora voc√™ pode criar experi√™ncias visuais tridimensionais!",
                commands: ['.container {', '}', 'transform-style: preserve-3d;', '.elemento {', 'transform: perspective(1000px) rotateY(45deg);', 'transform: rotateX(30deg);']
            },
    
            // N√çVEL 19 - ANIMA√á√ïES COMPLEXAS
            {
                story: "üé¨ Perfeito! Vamos criar anima√ß√µes cinematogr√°ficas.\n\nD√©cimo Nono Desafio: Crie uma sequ√™ncia animada! Use '@keyframes' com m√∫ltiplos est√°gios: 0% scale(1), 25% scale(1.1) rotate(10deg), 50% scale(0.9), 100% scale(1) rotate(0deg).",
                concept: "Anima√ß√µes Complexas",
                explanation: "ANIMA√á√ïES COMPLEXAS combinam m√∫ltiplas propriedades e timing! Voc√™ pode criar sequ√™ncias elaboradas com diferentes transforma√ß√µes, cores e posi√ß√µes. √â cinema digital!",
                solution: ['@keyframes complexa {', '0% { transform: scale(1) rotate(0deg); }', '25% { transform: scale(1.1) rotate(10deg); }', '50% { transform: scale(0.9) rotate(-5deg); }', '100% { transform: scale(1) rotate(0deg); }', '}', '.elemento { animation: complexa 3s ease-in-out; }'],
                success: "üé≠ Sensacional! Voc√™ criou uma anima√ß√£o digna de cinema!\n\nAnima√ß√µes complexas s√£o a marca de designers avan√ßados. Voc√™ dominou a arte do movimento digital!",
                commands: ['@keyframes complexa {', '0% { transform: scale(1) rotate(0deg); }', '25% { transform: scale(1.1) rotate(10deg); }', '50% { transform: scale(0.9) rotate(-5deg); }', '100% { transform: scale(1) rotate(0deg); }', '}', '.elemento { animation: complexa 3s ease-in-out; }']
            },
    
            // N√çVEL 20 - PROJETO FINAL AVAN√áADO
            {
                story: "üèÜ DESAFIO FINAL √âPICO!\n\nVoc√™ chegou ao √∫ltimo n√≠vel! Crie um cart√£o interativo completo que combine tudo que aprendeu: Use CSS Grid para layout, vari√°veis para cores, transforma√ß√µes 3D no hover, anima√ß√µes suaves, gradientes e sombras modernas.\n\nMostre que voc√™ √© um mestre do CSS!",
                concept: "Projeto Integrado Avan√ßado",
                explanation: "PROJETO FINAL integra todos os conceitos avan√ßados! Grid layout, vari√°veis CSS, transforma√ß√µes 3D, anima√ß√µes, filtros, gradientes - tudo trabalhando em harmonia. √â o teste definitivo do seu dom√≠nio CSS!",
                solution: [':root { --cor-card: #2c3e50; }', '.card {', 'display: grid;', 'background: linear-gradient(135deg, var(--cor-card), #34495e);', 'border-radius: 15px;', 'box-shadow: 0 10px 30px rgba(0,0,0,0.3);', 'transition: all 0.5s ease;', 'transform-style: preserve-3d;', '}', '.card:hover {', 'transform: perspective(1000px) rotateY(10deg) scale(1.05);', 'filter: brightness(1.1);', '}'],
                success: "üéâüèÜ PARAB√âNS, MESTRE DO CSS! üèÜüéâ\n\nVoc√™ completou todos os 20 n√≠veis e se tornou um verdadeiro especialista em CSS! Dominou desde seletores b√°sicos at√© transforma√ß√µes 3D complexas.\n\nAgora voc√™ pode criar qualquer design que imaginar - layouts responsivos, anima√ß√µes cinematogr√°ficas, efeitos 3D e muito mais!\n\nSeu conhecimento em CSS √© agora de n√≠vel profissional! üöÄ‚ú®",
                commands: [':root { --cor-card: #2c3e50; }', '.card {', '}', 'display: grid;', 'background: linear-gradient(135deg, var(--cor-card), #34495e);', 'border-radius: 15px;', 'box-shadow: 0 10px 30px rgba(0,0,0,0.3);', 'transition: all 0.5s ease;', 'transform-style: preserve-3d;', '.card:hover {', 'transform: perspective(1000px) rotateY(10deg) scale(1.05);', 'filter: brightness(1.1);']
            }
        ]
    }
};

function selectTrack(trackName) {
    selectedTrack = trackName;
    currentTrackData = tracks[trackName];
    currentLevel = 1;
    
    document.getElementById('selectionScreen').classList.add('hidden');
    document.getElementById('gameScreen').classList.remove('hidden');
    
    // Atualizar header com informa√ß√µes da trilha
    document.getElementById('gameTitle').innerHTML = `${currentTrackData.icon} Aventura do C√≥digo`;
    document.getElementById('trackName').textContent = currentTrackData.name;
    
    // Atualizar personagem baseado na trilha
    const character = document.getElementById('character');
    character.textContent = currentTrackData.character;
    
    // Carregar primeiro n√≠vel
    loadLevel();
}

function backToSelection() {
    document.getElementById('gameScreen').classList.add('hidden');
    document.getElementById('selectionScreen').classList.remove('hidden');
    
    // Reset do jogo
    currentLevel = 1;
    userCommands = [];
    selectedTrack = '';
}

function addCommand(command) {
    userCommands.push(command);
    updateCodeDisplay();
}

function updateCodeDisplay() {
    const codeEditor = document.getElementById('codeEditor');
    
    // Limpar editor mantendo apenas o coment√°rio inicial
    codeEditor.innerHTML = `
        <div class="code-line">
            <span class="line-number">1</span>
            <span style="color: #4CAF50;">// Seu c√≥digo aqui:</span>
        </div>
    `;
    
    // Adicionar comandos do usu√°rio
    userCommands.forEach((command, index) => {
        const lineDiv = document.createElement('div');
        lineDiv.className = 'code-line user-line';
        lineDiv.innerHTML = `
            <span class="line-number">${index + 2}</span>
            <span style="color: #FFD93D;">${command}</span>
            <button class="remove-line-btn" onclick="removeCommand(${index})" title="Remover esta linha">√ó</button>
        `;
        codeEditor.appendChild(lineDiv);
    });
}

function clearCode() {
    userCommands = [];
    updateCodeDisplay();
    document.getElementById('resultPanel').classList.remove('show');
}

function undoLastCommand() {
    if (userCommands.length > 0) {
        userCommands.pop();
        updateCodeDisplay();
    }
}

function removeCommand(index) {
    userCommands.splice(index, 1);
    updateCodeDisplay();
}

function runCode() {
    const level = currentTrackData.levels[currentLevel - 1];
    const character = document.getElementById('character');
    const resultPanel = document.getElementById('resultPanel');
    const resultText = document.getElementById('resultText');

    // Anima√ß√£o do personagem baseada na trilha
    character.classList.add('moving');
    
    if (selectedTrack === 'css') {
        // Anima√ß√£o especial para CSS
        character.style.background = 'linear-gradient(45deg, #e74c3c, #f39c12)';
        setTimeout(() => {
            character.style.background = '#FF6B6B';
            character.classList.remove('moving');
        }, 1500);
    } else if (selectedTrack === 'javascript') {
        // Anima√ß√£o especial para JavaScript
        character.style.background = 'linear-gradient(45deg, #f1c40f, #f39c12)';
        setTimeout(() => {
            character.style.background = '#FF6B6B';
            character.classList.remove('moving');
        }, 1500);
    } else {
        setTimeout(() => character.classList.remove('moving'), 1000);
    }

    // Verificar se a solu√ß√£o est√° correta
    const isCorrect = arraysEqual(userCommands, level.solution);

    setTimeout(() => {
        if (isCorrect) {
            resultText.innerHTML = `<div style="color: #27ae60; font-weight: bold;">${level.success}</div>`;
            if (currentLevel < currentTrackData.levels.length) {
                document.getElementById('nextBtn').style.display = 'block';
            } else {
                // Trilha completada
                document.getElementById('nextBtn').innerHTML = 'üéì Trilha Conclu√≠da!';
                document.getElementById('nextBtn').style.display = 'block';
                document.getElementById('nextBtn').onclick = () => {
                    alert(`Parab√©ns! Voc√™ completou a trilha de ${currentTrackData.name}! üöÄ\n\nAgora voc√™ domina os conceitos fundamentais dessa √°rea. Que tal experimentar outra trilha?`);
                    backToSelection();
                };
            }
        } else {
            let hintText = getTrackSpecificHint(level.solution);
            
            resultText.innerHTML = `<div style="color: #e74c3c; font-weight: bold;">ü§î Ops! Essa sequ√™ncia n√£o funcionou. Tente novamente!</div>
            <div style="margin-top: 10px; color: #7f8c8d;">
                <strong>Dica:</strong> ${hintText}
            </div>`;
            document.getElementById('nextBtn').style.display = 'none';
        }
        resultPanel.classList.add('show');
    }, 1500);
}

function getTrackSpecificHint(solution) {
    if (selectedTrack === 'javascript') {
        return `Voc√™ precisa usar: ${solution.join(' ‚Üí ')}. Lembre-se da sintaxe do JavaScript!`;
    } else if (selectedTrack === 'css') {
        return `Voc√™ precisa usar: ${solution.join(' ')}. N√£o esque√ßa das chaves e ponto-e-v√≠rgula!`;
    } else {
        return `Voc√™ precisa usar: ${solution.join(' ‚Üí ')}`;
    }
}

function arraysEqual(a, b) {
    return a.length === b.length && a.every((val, i) => val === b[i]);
}

function nextLevel() {
    if (currentLevel < currentTrackData.levels.length) {
        currentLevel++;
        loadLevel();
        clearCode();
    }
}

function loadLevel() {
    const level = currentTrackData.levels[currentLevel - 1];
    document.getElementById('currentLevel').textContent = currentLevel;
    document.getElementById('currentConcept').textContent = level.concept;
    document.getElementById('storyText').innerHTML = level.story.replace(/\n/g, '<br>');
    document.getElementById('conceptExplanation').innerHTML = 
        `<h4>üí° Conceito: ${level.concept}</h4>${level.explanation}`;
    
    // Atualizar comandos dispon√≠veis para o n√≠vel atual
    const commandsContainer = document.getElementById('availableCommands');
    commandsContainer.innerHTML = '<h3>üìù Comandos Dispon√≠veis:</h3>';
    
    level.commands.forEach(command => {
        const btn = document.createElement('button');
        btn.className = 'command-btn';
        btn.textContent = command;
        btn.onclick = () => addCommand(command);
        commandsContainer.appendChild(btn);
    });
    
    // Limpar o c√≥digo quando carregar novo n√≠vel
    clearCode();
}

// Inicializar mostrando a tela de sele√ß√£o
document.getElementById('selectionScreen').classList.remove('hidden');
document.getElementById('gameScreen').classList.add('hidden');