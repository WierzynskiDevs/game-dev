let currentLevel = 1;
let userCommands = [];
let selectedTrack = '';
let currentTrackData = {};

// DADOS DAS TRILHAS
const tracks = {
    javascript: {
        name: "JavaScript",
        icon: "üü®",
        character: "üíª",
        levels: [
            {
                story: "üåü Bem-vindo ao Reino do JavaScript!\n\nVoc√™ √© um desenvolvedor web em treinamento. Sua miss√£o √© dominar a linguagem que controla toda a web!\n\nPrimeiro Desafio: Crie sua primeira vari√°vel para armazenar o nome do her√≥i. Use 'let' para declarar vari√°veis em JavaScript!",
                concept: "Vari√°veis",
                explanation: "VARI√ÅVEIS s√£o 'caixas' que guardam dados! Em JavaScript, usamos 'let' para criar vari√°veis que podem mudar de valor. √â como dar um nome para um valor que queremos usar depois.",
                solution: ['let nomeHeroi = "Aventureiro"', 'console.log(nomeHeroi)'],
                success: "üéâ Perfeito! Voc√™ criou sua primeira vari√°vel em JavaScript!\n\nVari√°veis s√£o fundamentais - elas guardam informa√ß√µes que seu programa pode usar e modificar. O 'let' cria uma vari√°vel que pode ser alterada depois!",
                commands: ['let nomeHeroi = "Aventureiro"', 'console.log(nomeHeroi)', 'let idade = 25', 'const PI = 3.14']
            },
            {
                story: "üíª Excelente! Agora voc√™ domina vari√°veis.\n\nSegundo Desafio: O her√≥i precisa de uma fun√ß√£o para calcular danos! Crie uma fun√ß√£o chamada 'calcularDano' que recebe um par√¢metro 'ataque' e retorna o valor multiplicado por 2.\n\nFun√ß√µes s√£o blocos de c√≥digo reutiliz√°veis em JavaScript!",
                concept: "Fun√ß√µes",
                explanation: "FUN√á√ïES s√£o blocos de c√≥digo que fazem tarefas espec√≠ficas! Voc√™ define uma vez e pode usar muitas vezes. Em JavaScript, usamos 'function nome(par√¢metros) { c√≥digo }'.",
                solution: ['function calcularDano(ataque) {', 'return ataque * 2', '}', 'console.log(calcularDano(10))'],
                success: "‚ö° Fant√°stico! Sua fun√ß√£o est√° funcionando perfeitamente!\n\nFun√ß√µes s√£o o cora√ß√£o do JavaScript! Elas organizam o c√≥digo, evitam repeti√ß√£o e tornam tudo mais limpo e reutiliz√°vel.",
                commands: ['function calcularDano(ataque) {', 'return ataque * 2', '}', 'console.log(calcularDano(10))', 'let resultado =']
            },
            {
                story: "üî• Incr√≠vel! Suas fun√ß√µes est√£o poderosas.\n\nTerceiro Desafio: Agora vamos manipular o DOM! O her√≥i precisa mudar o texto de um elemento HTML na p√°gina. Use 'document.getElementById()' para selecionar um elemento e '.textContent' para alterar seu texto.\n\nDOM √© como JavaScript conversa com HTML!",
                concept: "Manipula√ß√£o do DOM",
                explanation: "DOM (Document Object Model) √© como JavaScript v√™ e modifica p√°ginas web! Voc√™ pode selecionar elementos HTML e alterar seu conte√∫do, estilo ou comportamento.",
                solution: ['let elemento = document.getElementById("heroi")', 'elemento.textContent = "Her√≥i Poderoso!"'],
                success: "üåê Sensacional! Voc√™ dominou a manipula√ß√£o do DOM!\n\nIsso √© JavaScript real! Agora voc√™ pode fazer p√°ginas web interativas, alterando conte√∫do, estilos e muito mais dinamicamente!",
                commands: ['let elemento = document.getElementById("heroi")', 'elemento.textContent = "Her√≥i Poderoso!"', 'elemento.style.color = "red"', 'document.querySelector(".classe")']
            }
        ]
    },
    logic: {
        name: "L√≥gica de Programa√ß√£o",
        icon: "üß†",
        character: "ü§ñ",
        levels: [
            {
                story: "üß† Bem-vindo ao Reino da L√≥gica!\n\nVoc√™ √© um jovem programador aprendendo a pensar como um computador. Sua miss√£o √© dominar os fundamentos do pensamento computacional!\n\nPrimeiro Desafio: O her√≥i precisa se mover para frente. Use comandos b√°sicos para programar suas a√ß√µes!",
                concept: "Comandos B√°sicos",
                explanation: "ALGORITMOS come√ßam com comandos simples! Cada instru√ß√£o faz o computador executar uma a√ß√£o espec√≠fica. √â como dar dire√ß√µes muito precisas para algu√©m que segue exatamente o que voc√™ fala.",
                solution: ['mover()'],
                success: "üéØ Perfeito! Voc√™ executou seu primeiro comando!\n\nPrograma√ß√£o √© sobre dar instru√ß√µes claras e precisas. Cada comando tem um prop√≥sito espec√≠fico e o computador os executa na ordem exata!",
                commands: ['mover()', 'pular()', 'pegar()', 'esperar()']
            },
            {
                story: "‚ö° Excelente! Agora vamos trabalhar com repeti√ß√£o.\n\nSegundo Desafio: O her√≥i precisa coletrar 3 moedas em linha. Em vez de escrever 'mover(), pegar()' tr√™s vezes, use um LOOP! O comando 'repetir(3)' executar√° os comandos dentro dele 3 vezes automaticamente.\n\nLoops s√£o fundamentais na programa√ß√£o!",
                concept: "Loops (Repeti√ß√£o)",
                explanation: "LOOPS fazem o computador repetir tarefas automaticamente! Em vez de escrever o mesmo c√≥digo v√°rias vezes, usamos loops. √â como dizer: 'fa√ßa isso X vezes'.",
                solution: ['repetir(3)', 'mover()', 'pegar()', 'fim_repetir'],
                success: "üîÑ Incr√≠vel! Voc√™ automatizou uma tarefa repetitiva!\n\nLoops s√£o uma das ferramentas mais poderosas da programa√ß√£o. Eles fazem o computador trabalhar para voc√™, executando tarefas repetitivas sem erros!",
                commands: ['repetir(3)', 'mover()', 'pegar()', 'fim_repetir', 'esperar()']
            },
            {
                story: "üé≤ Fant√°stico! Agora vamos tomar decis√µes inteligentes.\n\nTerceiro Desafio: H√° duas portas! Use sensores para verificar qual √© segura e tome uma decis√£o. Se a porta da direita for segura, entre por ela. Sen√£o, v√° pela esquerda.\n\nCondicionais fazem programas 'pensarem'!",
                concept: "Condicionais (If/Else)",
                explanation: "CONDICIONAIS permitem que programas tomem decis√µes! 'SE isso for verdade, ENT√ÉO fa√ßa aquilo, SEN√ÉO fa√ßa outra coisa'. √â como dar ao computador a capacidade de escolher!",
                solution: ['verificar_portas()', 'se(porta_direita_segura)', 'entrar_direita()', 'senao', 'entrar_esquerda()', 'fim_se'],
                success: "üß© Extraordin√°rio! Seu programa tomou uma decis√£o inteligente!\n\nCondicionais s√£o o que fazem programas parecerem 'inteligentes'. Eles analisam situa√ß√µes e escolhem a melhor a√ß√£o baseada nas condi√ß√µes!",
                commands: ['verificar_portas()', 'se(porta_direita_segura)', 'senao', 'fim_se', 'entrar_direita()', 'entrar_esquerda()']
            }
        ]
    },
    css: {
        name: "CSS & Design",
        icon: "üé®",
        character: "üé®",
        levels: [
            {
                story: "üé® Bem-vindo ao Reino do Design!\n\nVoc√™ √© um designer web aprendendo a criar experi√™ncias visuais incr√≠veis! Sua miss√£o √© dominar CSS, a linguagem que deixa a web bonita.\n\nPrimeiro Desafio: O her√≥i precisa de estilo! Use um seletor CSS para dar cor vermelha ao texto do elemento 'heroi'.",
                concept: "Seletores CSS",
                explanation: "SELETORES s√£o como voc√™ escolhe elementos HTML para estilizar! Eles s√£o a ponte entre seu CSS e os elementos da p√°gina. Cada seletor aponta para elementos espec√≠ficos.",
                solution: ['#heroi {', 'color: red;', '}'],
                success: "üåà Perfeito! Voc√™ deu vida ao seu primeiro elemento!\n\nSeletores s√£o fundamentais no CSS. Eles permitem escolher exatamente quais elementos voc√™ quer estilizar na p√°gina!",
                commands: ['#heroi {', '}', 'color: red;', '.classe {', 'background: blue;']
            },
            {
                story: "üèóÔ∏è Incr√≠vel! Agora vamos organizar o layout.\n\nSegundo Desafio: Crie um container flex√≠vel! Use 'display: flex' para organizar elementos lado a lado e 'justify-content: center' para centraliz√°-los.\n\nFlexbox √© a ferramenta moderna para layouts!",
                concept: "Flexbox Layout",
                explanation: "FLEXBOX √© um sistema de layout poderoso! Ele permite organizar elementos de forma flex√≠vel e responsiva. √â como ter superpoderes para organizar coisas na tela!",
                solution: ['.container {', 'display: flex;', 'justify-content: center;', '}'],
                success: "üìê Sensacional! Voc√™ criou um layout flex√≠vel e moderno!\n\nFlexbox revolucionou como fazemos layouts na web. Agora voc√™ pode organizar elementos de forma intuitiva e responsiva!",
                commands: ['.container {', '}', 'display: flex;', 'justify-content: center;', 'align-items: center;']
            },
            {
                story: "‚ú® Fant√°stico! Agora vamos adicionar movimento.\n\nTerceiro Desafio: Crie uma anima√ß√£o suave! Use '@keyframes' para definir uma anima√ß√£o que faz o her√≥i se mover da esquerda para a direita, e aplique com 'animation'.\n\nAnima√ß√µes trazem vida √†s p√°ginas!",
                concept: "Anima√ß√µes CSS",
                explanation: "ANIMA√á√ïES CSS criam movimento e interatividade! @keyframes define os passos da anima√ß√£o, e a propriedade animation aplica ela ao elemento. √â como dar vida aos seus designs!",
                solution: ['@keyframes mover {', 'from { transform: translateX(0); }', 'to { transform: translateX(100px); }', '}', '.heroi { animation: mover 2s; }'],
                success: "üé≠ Incr√≠vel! Voc√™ criou uma anima√ß√£o fluida e profissional!\n\nAnima√ß√µes CSS s√£o o que fazem sites modernos se destacarem. Voc√™ agora pode criar experi√™ncias visuais envolventes e interativas!",
                commands: ['@keyframes mover {', 'from { transform: translateX(0); }', 'to { transform: translateX(100px); }', '}', '.heroi { animation: mover 2s; }']
            }
        ]
    }
};

function selectTrack(trackName) {
    selectedTrack = trackName;
    currentTrackData = tracks[trackName];
    currentLevel = 1;
    
    document.getElementById('selectionScreen').classList.add('hidden');
    document.getElementById('gameScreen').classList.remove('hidden');
    
    // Atualizar header com informa√ß√µes da trilha
    document.getElementById('gameTitle').innerHTML = `${currentTrackData.icon} Aventura do C√≥digo`;
    document.getElementById('trackName').textContent = currentTrackData.name;
    
    // Atualizar personagem baseado na trilha
    const character = document.getElementById('character');
    character.textContent = currentTrackData.character;
    
    // Carregar primeiro n√≠vel
    loadLevel();
}

function backToSelection() {
    document.getElementById('gameScreen').classList.add('hidden');
    document.getElementById('selectionScreen').classList.remove('hidden');
    
    // Reset do jogo
    currentLevel = 1;
    userCommands = [];
    selectedTrack = '';
}

function addCommand(command) {
    userCommands.push(command);
    updateCodeDisplay();
}

function updateCodeDisplay() {
    const codeEditor = document.getElementById('codeEditor');
    
    // Limpar editor mantendo apenas o coment√°rio inicial
    codeEditor.innerHTML = `
        <div class="code-line">
            <span class="line-number">1</span>
            <span style="color: #4CAF50;">// Seu c√≥digo aqui:</span>
        </div>
    `;
    
    // Adicionar comandos do usu√°rio
    userCommands.forEach((command, index) => {
        const lineDiv = document.createElement('div');
        lineDiv.className = 'code-line user-line';
        lineDiv.innerHTML = `
            <span class="line-number">${index + 2}</span>
            <span style="color: #FFD93D;">${command}</span>
            <button class="remove-line-btn" onclick="removeCommand(${index})" title="Remover esta linha">√ó</button>
        `;
        codeEditor.appendChild(lineDiv);
    });
}

function clearCode() {
    userCommands = [];
    updateCodeDisplay();
    document.getElementById('resultPanel').classList.remove('show');
}

function undoLastCommand() {
    if (userCommands.length > 0) {
        userCommands.pop();
        updateCodeDisplay();
    }
}

function removeCommand(index) {
    userCommands.splice(index, 1);
    updateCodeDisplay();
}

function runCode() {
    const level = currentTrackData.levels[currentLevel - 1];
    const character = document.getElementById('character');
    const resultPanel = document.getElementById('resultPanel');
    const resultText = document.getElementById('resultText');

    // Anima√ß√£o do personagem baseada na trilha
    character.classList.add('moving');
    
    if (selectedTrack === 'css') {
        // Anima√ß√£o especial para CSS
        character.style.background = 'linear-gradient(45deg, #e74c3c, #f39c12)';
        setTimeout(() => {
            character.style.background = '#FF6B6B';
            character.classList.remove('moving');
        }, 1500);
    } else if (selectedTrack === 'javascript') {
        // Anima√ß√£o especial para JavaScript
        character.style.background = 'linear-gradient(45deg, #f1c40f, #f39c12)';
        setTimeout(() => {
            character.style.background = '#FF6B6B';
            character.classList.remove('moving');
        }, 1500);
    } else {
        setTimeout(() => character.classList.remove('moving'), 1000);
    }

    // Verificar se a solu√ß√£o est√° correta
    const isCorrect = arraysEqual(userCommands, level.solution);

    setTimeout(() => {
        if (isCorrect) {
            resultText.innerHTML = `<div style="color: #27ae60; font-weight: bold;">${level.success}</div>`;
            if (currentLevel < currentTrackData.levels.length) {
                document.getElementById('nextBtn').style.display = 'block';
            } else {
                // Trilha completada
                document.getElementById('nextBtn').innerHTML = 'üéì Trilha Conclu√≠da!';
                document.getElementById('nextBtn').style.display = 'block';
                document.getElementById('nextBtn').onclick = () => {
                    alert(`Parab√©ns! Voc√™ completou a trilha de ${currentTrackData.name}! üöÄ\n\nAgora voc√™ domina os conceitos fundamentais dessa √°rea. Que tal experimentar outra trilha?`);
                    backToSelection();
                };
            }
        } else {
            let hintText = getTrackSpecificHint(level.solution);
            
            resultText.innerHTML = `<div style="color: #e74c3c; font-weight: bold;">ü§î Ops! Essa sequ√™ncia n√£o funcionou. Tente novamente!</div>
            <div style="margin-top: 10px; color: #7f8c8d;">
                <strong>Dica:</strong> ${hintText}
            </div>`;
            document.getElementById('nextBtn').style.display = 'none';
        }
        resultPanel.classList.add('show');
    }, 1500);
}

function getTrackSpecificHint(solution) {
    if (selectedTrack === 'javascript') {
        return `Voc√™ precisa usar: ${solution.join(' ‚Üí ')}. Lembre-se da sintaxe do JavaScript!`;
    } else if (selectedTrack === 'css') {
        return `Voc√™ precisa usar: ${solution.join(' ')}. N√£o esque√ßa das chaves e ponto-e-v√≠rgula!`;
    } else {
        return `Voc√™ precisa usar: ${solution.join(' ‚Üí ')}`;
    }
}

function arraysEqual(a, b) {
    return a.length === b.length && a.every((val, i) => val === b[i]);
}

function nextLevel() {
    if (currentLevel < currentTrackData.levels.length) {
        currentLevel++;
        loadLevel();
        clearCode();
    }
}

function loadLevel() {
    const level = currentTrackData.levels[currentLevel - 1];
    document.getElementById('currentLevel').textContent = currentLevel;
    document.getElementById('currentConcept').textContent = level.concept;
    document.getElementById('storyText').innerHTML = level.story.replace(/\n/g, '<br>');
    document.getElementById('conceptExplanation').innerHTML = 
        `<h4>üí° Conceito: ${level.concept}</h4>${level.explanation}`;
    
    // Atualizar comandos dispon√≠veis para o n√≠vel atual
    const commandsContainer = document.getElementById('availableCommands');
    commandsContainer.innerHTML = '<h3>üìù Comandos Dispon√≠veis:</h3>';
    
    level.commands.forEach(command => {
        const btn = document.createElement('button');
        btn.className = 'command-btn';
        btn.textContent = command;
        btn.onclick = () => addCommand(command);
        commandsContainer.appendChild(btn);
    });
    
    // Limpar o c√≥digo quando carregar novo n√≠vel
    clearCode();
}

// Inicializar mostrando a tela de sele√ß√£o
document.getElementById('selectionScreen').classList.remove('hidden');
document.getElementById('gameScreen').classList.add('hidden');