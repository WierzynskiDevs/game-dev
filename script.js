let currentLevel = 1;
let userCommands = [];
let selectedTrack = '';
let currentTrackData = {};

// DADOS DAS TRILHAS
const tracks = {
    javascript: {
        name: "JavaScript",
        icon: "üü®",
        character: "üíª",
        levels: [
            {
                story: "üåü Bem-vindo ao Reino do JavaScript!\n\nVoc√™ √© um desenvolvedor web em treinamento. Sua miss√£o √© dominar a linguagem que controla toda a web!\n\nPrimeiro Desafio: Crie sua primeira vari√°vel para armazenar o nome do her√≥i. Use 'let' para declarar vari√°veis em JavaScript!",
                concept: "Vari√°veis",
                explanation: "VARI√ÅVEIS s√£o 'caixas' que guardam dados! Em JavaScript, usamos 'let' para criar vari√°veis que podem mudar de valor. √â como dar um nome para um valor que queremos usar depois.",
                solution: ['let nomeHeroi = "Aventureiro"', 'console.log(nomeHeroi)'],
                success: "üéâ Perfeito! Voc√™ criou sua primeira vari√°vel em JavaScript!\n\nVari√°veis s√£o fundamentais - elas guardam informa√ß√µes que seu programa pode usar e modificar. O 'let' cria uma vari√°vel que pode ser alterada depois!",
                commands: ['let nomeHeroi = "Aventureiro"', 'console.log(nomeHeroi)', 'let idade = 25', 'const PI = 3.14']
            },
            {
                story: "üíª Excelente! Agora voc√™ domina vari√°veis.\n\nSegundo Desafio: O her√≥i precisa de uma fun√ß√£o para calcular danos! Crie uma fun√ß√£o chamada 'calcularDano' que recebe um par√¢metro 'ataque' e retorna o valor multiplicado por 2.\n\nFun√ß√µes s√£o blocos de c√≥digo reutiliz√°veis em JavaScript!",
                concept: "Fun√ß√µes",
                explanation: "FUN√á√ïES s√£o blocos de c√≥digo que fazem tarefas espec√≠ficas! Voc√™ define uma vez e pode usar muitas vezes. Em JavaScript, usamos 'function nome(par√¢metros) { c√≥digo }'.",
                solution: ['function calcularDano(ataque) {', 'return ataque * 2', '}', 'console.log(calcularDano(10))'],
                success: "‚ö° Fant√°stico! Sua fun√ß√£o est√° funcionando perfeitamente!\n\nFun√ß√µes s√£o o cora√ß√£o do JavaScript! Elas organizam o c√≥digo, evitam repeti√ß√£o e tornam tudo mais limpo e reutiliz√°vel.",
                commands: ['function calcularDano(ataque) {', 'return ataque * 2', '}', 'console.log(calcularDano(10))', 'let resultado =']
            },
            {
                story: "üî• Incr√≠vel! Suas fun√ß√µes est√£o poderosas.\n\nTerceiro Desafio: Agora vamos manipular o DOM! O her√≥i precisa mudar o texto de um elemento HTML na p√°gina. Use 'document.getElementById()' para selecionar um elemento e '.textContent' para alterar seu texto.\n\nDOM √© como JavaScript conversa com HTML!",
                concept: "Manipula√ß√£o do DOM",
                explanation: "DOM (Document Object Model) √© como JavaScript v√™ e modifica p√°ginas web! Voc√™ pode selecionar elementos HTML e alterar seu conte√∫do, estilo ou comportamento.",
                solution: ['let elemento = document.getElementById("heroi")', 'elemento.textContent = "Her√≥i Poderoso!"'],
                success: "üåê Sensacional! Voc√™ dominou a manipula√ß√£o do DOM!\n\nIsso √© JavaScript real! Agora voc√™ pode fazer p√°ginas web interativas, alterando conte√∫do, estilos e muito mais dinamicamente!",
                commands: ['let elemento = document.getElementById("heroi")', 'elemento.textContent = "Her√≥i Poderoso!"', 'elemento.style.color = "red"', 'document.querySelector(".classe")']
            }
        ]
    },
    logic: {
        name: "L√≥gica de Programa√ß√£o",
        icon: "üß†",
        character: "ü§ñ",
        levels: [
            {
                story: "üß† Bem-vindo ao Reino da L√≥gica!\n\nVoc√™ √© um jovem programador aprendendo a pensar como um computador. Sua miss√£o √© dominar os fundamentos do pensamento computacional!\n\nPrimeiro Desafio: O her√≥i precisa se mover para frente. Use comandos b√°sicos para programar suas a√ß√µes!",
                concept: "Comandos B√°sicos",
                explanation: "ALGORITMOS come√ßam com comandos simples! Cada instru√ß√£o faz o computador executar uma a√ß√£o espec√≠fica. √â como dar dire√ß√µes muito precisas para algu√©m que segue exatamente o que voc√™ fala.",
                solution: ['mover()'],
                success: "üéØ Perfeito! Voc√™ executou seu primeiro comando!\n\nPrograma√ß√£o √© sobre dar instru√ß√µes claras e precisas. Cada comando tem um prop√≥sito espec√≠fico e o computador os executa na ordem exata!",
                commands: ['mover()', 'pular()', 'pegar()', 'esperar()']
            },
            {
                story: "‚ö° Excelente! Agora vamos trabalhar com repeti√ß√£o.\n\nSegundo Desafio: O her√≥i precisa coletrar 3 moedas em linha. Em vez de escrever 'mover(), pegar()' tr√™s vezes, use um LOOP! O comando 'repetir(3)' executar√° os comandos dentro dele 3 vezes automaticamente.\n\nLoops s√£o fundamentais na programa√ß√£o!",
                concept: "Loops (Repeti√ß√£o)",
                explanation: "LOOPS fazem o computador repetir tarefas automaticamente! Em vez de escrever o mesmo c√≥digo v√°rias vezes, usamos loops. √â como dizer: 'fa√ßa isso X vezes'.",
                solution: ['repetir(3)', 'mover()', 'pegar()', 'fim_repetir'],
                success: "üîÑ Incr√≠vel! Voc√™ automatizou uma tarefa repetitiva!\n\nLoops s√£o uma das ferramentas mais poderosas da programa√ß√£o. Eles fazem o computador trabalhar para voc√™, executando tarefas repetitivas sem erros!",
                commands: ['repetir(3)', 'mover()', 'pegar()', 'fim_repetir', 'esperar()']
            },
            {
                story: "üé≤ Fant√°stico! Agora vamos tomar decis√µes inteligentes.\n\nTerceiro Desafio: H√° duas portas! Use sensores para verificar qual √© segura e tome uma decis√£o. Se a porta da direita for segura, entre por ela. Sen√£o, v√° pela esquerda.\n\nCondicionais fazem programas 'pensarem'!",
                concept: "Condicionais (If/Else)",
                explanation: "CONDICIONAIS permitem que programas tomem decis√µes! 'SE isso for verdade, ENT√ÉO fa√ßa aquilo, SEN√ÉO fa√ßa outra coisa'. √â como dar ao computador a capacidade de escolher!",
                solution: ['verificar_portas()', 'se(porta_direita_segura)', 'entrar_direita()', 'senao', 'entrar_esquerda()', 'fim_se'],
                success: "üß© Extraordin√°rio! Seu programa tomou uma decis√£o inteligente!\n\nCondicionais s√£o o que fazem programas parecerem 'inteligentes'. Eles analisam situa√ß√µes e escolhem a melhor a√ß√£o baseada nas condi√ß√µes!",
                commands: ['verificar_portas()', 'se(porta_direita_segura)', 'senao', 'fim_se', 'entrar_direita()', 'entrar_esquerda()']
            }
        ]
    },
    css: {
        name: "CSS & Design",
        icon: "üé®",
        character: "üé®",
        levels: [
            // N√çVEL 1 - FUNDAMENTOS
            {
                story: "üé® Bem-vindo ao Reino do Design!\n\nVoc√™ √© um designer web aprendendo a criar experi√™ncias visuais incr√≠veis! Sua miss√£o √© dominar CSS, a linguagem que deixa a web bonita.\n\nPrimeiro Desafio: O her√≥i precisa de estilo! Use um seletor CSS para dar cor vermelha ao texto do elemento 'heroi'.",
                concept: "Seletores B√°sicos",
                explanation: "SELETORES s√£o como voc√™ escolhe elementos HTML para estilizar! Eles s√£o a ponte entre seu CSS e os elementos da p√°gina. # para IDs, . para classes, e o nome da tag para elementos.",
                solution: ['#heroi {', 'color: red;', '}'],
                success: "üåà Perfeito! Voc√™ deu vida ao seu primeiro elemento!\n\nSeletores s√£o fundamentais no CSS. Eles permitem escolher exatamente quais elementos voc√™ quer estilizar na p√°gina!",
                commands: ['#heroi {', '}', 'color: red;', '.classe {', 'background: blue;', 'h1 {']
            },
            
            // N√çVEL 2 - CORES E FUNDOS
            {
                story: "üåü Excelente! Agora vamos trabalhar com cores avan√ßadas.\n\nSegundo Desafio: Crie um fundo gradiente vibrante! Use 'background: linear-gradient()' para criar um gradiente do azul para o roxo no container principal.",
                concept: "Cores e Gradientes",
                explanation: "GRADIENTES criam transi√ß√µes suaves entre cores! linear-gradient() cria gradientes lineares, e voc√™ pode especificar dire√ß√£o e m√∫ltiplas cores. √â como pintar com degrad√™s digitais!",
                solution: ['.container {', 'background: linear-gradient(45deg, blue, purple);', '}'],
                success: "üé® Sensacional! Voc√™ criou um fundo com gradiente profissional!\n\nGradientes s√£o fundamentais no design moderno. Eles adicionam profundidade e eleg√¢ncia aos layouts!",
                commands: ['.container {', '}', 'background: linear-gradient(45deg, blue, purple);', 'background: radial-gradient(circle, red, yellow);', 'color: #ff6b6b;']
            },
    
            // N√çVEL 3 - TIPOGRAFIA
            {
                story: "üìù Incr√≠vel! Agora vamos dar personalidade ao texto.\n\nTerceiro Desafio: Estilize o t√≠tulo principal! Use 'font-family', 'font-size: 2em' e 'font-weight: bold' para criar um t√≠tulo impactante.",
                concept: "Tipografia",
                explanation: "TIPOGRAFIA √© a arte de estilizar texto! font-family define a fonte, font-size o tamanho, font-weight o peso. A tipografia transmite personalidade e hierarquia visual!",
                solution: ['h1 {', 'font-family: Arial, sans-serif;', 'font-size: 2em;', 'font-weight: bold;', '}'],
                success: "‚úçÔ∏è Fant√°stico! Seu texto agora tem personalidade pr√≥pria!\n\nTipografia bem trabalhada faz toda a diferen√ßa na comunica√ß√£o visual. Voc√™ dominou os fundamentos!",
                commands: ['h1 {', '}', 'font-family: Arial, sans-serif;', 'font-size: 2em;', 'font-weight: bold;', 'text-align: center;']
            },
    
            // N√çVEL 4 - BOX MODEL
            {
                story: "üì¶ Perfeito! Agora vamos entender o espa√ßamento.\n\nQuarto Desafio: Crie um cart√£o bem espa√ßado! Use 'padding: 20px' para espa√ßo interno, 'margin: 10px' para espa√ßo externo e 'border: 2px solid black' para uma borda.",
                concept: "Box Model",
                explanation: "BOX MODEL √© como CSS v√™ cada elemento! Margin (espa√ßo externo), Border (borda), Padding (espa√ßo interno) e Content (conte√∫do). √â fundamental para layouts organizados!",
                solution: ['.card {', 'padding: 20px;', 'margin: 10px;', 'border: 2px solid black;', '}'],
                success: "üìè Excelente! Voc√™ dominou o espa√ßamento de elementos!\n\nO Box Model √© a base de todo layout CSS. Agora voc√™ pode controlar precisamente o espa√ßo dos seus elementos!",
                commands: ['.card {', '}', 'padding: 20px;', 'margin: 10px;', 'border: 2px solid black;', 'border-radius: 10px;']
            },
    
            // N√çVEL 5 - FLEXBOX B√ÅSICO
            {
                story: "üèóÔ∏è Incr√≠vel! Agora vamos organizar o layout.\n\nQuinto Desafio: Crie um container flex√≠vel! Use 'display: flex' para organizar elementos lado a lado e 'justify-content: center' para centraliz√°-los horizontalmente.",
                concept: "Flexbox - B√°sico",
                explanation: "FLEXBOX √© um sistema de layout poderoso! display: flex transforma o container em flex√≠vel, justify-content alinha horizontalmente. √â como ter superpoderes para organizar elementos!",
                solution: ['.container {', 'display: flex;', 'justify-content: center;', '}'],
                success: "üìê Sensacional! Voc√™ criou um layout flex√≠vel e moderno!\n\nFlexbox revolucionou como fazemos layouts na web. Agora seus elementos se organizam de forma inteligente!",
                commands: ['.container {', '}', 'display: flex;', 'justify-content: center;', 'align-items: center;', 'flex-direction: column;']
            },
    
            // N√çVEL 6 - FLEXBOX AVAN√áADO
            {
                story: "üéØ Fant√°stico! Vamos aprofundar no Flexbox.\n\nSexto Desafio: Crie um layout responsivo! Use 'flex-wrap: wrap' para quebrar linhas automaticamente e 'gap: 20px' para espa√ßamento uniforme entre os itens.",
                concept: "Flexbox - Avan√ßado",
                explanation: "FLEXBOX AVAN√áADO permite layouts responsivos! flex-wrap permite quebra de linha, gap cria espa√ßamento uniforme, flex-grow controla crescimento. √â design responsivo inteligente!",
                solution: ['.container {', 'display: flex;', 'flex-wrap: wrap;', 'gap: 20px;', '}'],
                success: "üöÄ Incr√≠vel! Seu layout agora √© totalmente responsivo!\n\nVoc√™ dominou Flexbox avan√ßado! Seus layouts se adaptam automaticamente a diferentes tamanhos de tela!",
                commands: ['.container {', '}', 'display: flex;', 'flex-wrap: wrap;', 'gap: 20px;', 'align-content: center;']
            },
    
            // N√çVEL 7 - POSICIONAMENTO
            {
                story: "üìç Excelente! Agora vamos posicionar elementos precisamente.\n\nS√©timo Desafio: Crie um elemento flutuante! Use 'position: absolute', 'top: 50px' e 'right: 20px' para posicionar um bot√£o no canto superior direito.",
                concept: "Posicionamento",
                explanation: "POSICIONAMENTO controla onde elementos aparecem! absolute remove do fluxo normal, relative posiciona relativamente, fixed fica fixo na tela. √â controle total sobre a localiza√ß√£o!",
                solution: ['.botao {', 'position: absolute;', 'top: 50px;', 'right: 20px;', '}'],
                success: "üéØ Perfeito! Voc√™ posicionou o elemento exatamente onde queria!\n\nPosicionamento CSS d√° controle total sobre a localiza√ß√£o dos elementos. Essencial para layouts complexos!",
                commands: ['.botao {', '}', 'position: absolute;', 'top: 50px;', 'right: 20px;', 'z-index: 10;']
            },
    
            // N√çVEL 8 - TRANSFORMA√á√ïES
            {
                story: "üîÑ Sensacional! Vamos adicionar transforma√ß√µes din√¢micas.\n\nOitavo Desafio: Fa√ßa o her√≥i girar! Use 'transform: rotate(45deg)' para rotacionar o elemento e 'transform-origin: center' para definir o ponto de rota√ß√£o.",
                concept: "Transforma√ß√µes 2D",
                explanation: "TRANSFORMA√á√ïES modificam elementos sem afetar o layout! rotate() gira, scale() redimensiona, translate() move. √â como manipular objetos no espa√ßo digital!",
                solution: ['.heroi {', 'transform: rotate(45deg);', 'transform-origin: center;', '}'],
                success: "üåÄ Incr√≠vel! Voc√™ criou uma transforma√ß√£o suave e profissional!\n\nTransforma√ß√µes CSS permitem efeitos visuais impressionantes sem JavaScript. Seu elemento ganhou vida!",
                commands: ['.heroi {', '}', 'transform: rotate(45deg);', 'transform: scale(1.2);', 'transform-origin: center;']
            },
    
            // N√çVEL 9 - ANIMA√á√ïES B√ÅSICAS
            {
                story: "‚ú® Fant√°stico! Agora vamos criar movimento.\n\nNono Desafio: Crie uma anima√ß√£o pulsante! Use '@keyframes pulsar' com 'transform: scale(1)' no 0% e 'transform: scale(1.1)' no 50%, depois aplique com 'animation: pulsar 2s infinite'.",
                concept: "Anima√ß√µes B√°sicas",
                explanation: "ANIMA√á√ïES CSS criam movimento fluido! @keyframes define os passos da anima√ß√£o, animation aplica ela ao elemento. √â como dar vida aos seus designs sem JavaScript!",
                solution: ['@keyframes pulsar {', '0% { transform: scale(1); }', '50% { transform: scale(1.1); }', '100% { transform: scale(1); }', '}', '.heroi { animation: pulsar 2s infinite; }'],
                success: "üé≠ Sensacional! Voc√™ criou uma anima√ß√£o suave e cativante!\n\nAnima√ß√µes CSS s√£o o que fazem sites modernos se destacarem. Voc√™ agora pode criar experi√™ncias visuais envolventes!",
                commands: ['@keyframes pulsar {', '0% { transform: scale(1); }', '50% { transform: scale(1.1); }', '100% { transform: scale(1); }', '}', '.heroi { animation: pulsar 2s infinite; }']
            },
    
            // N√çVEL 10 - HOVER EFFECTS
            {
                story: "üëÜ Incr√≠vel! Vamos criar interatividade com hover.\n\nD√©cimo Desafio: Crie um efeito hover elegante! Use ':hover' para mudar a cor de fundo para azul e adicione 'transition: all 0.3s ease' para suavizar a mudan√ßa.",
                concept: "Efeitos Hover",
                explanation: "HOVER EFFECTS respondem √† intera√ß√£o do usu√°rio! :hover ativa quando o mouse passa sobre o elemento, transition suaviza mudan√ßas. √â interatividade visual pura!",
                solution: ['.botao {', 'background: gray;', 'transition: all 0.3s ease;', '}', '.botao:hover {', 'background: blue;', '}'],
                success: "üñ±Ô∏è Perfeito! Seu elemento agora responde ao mouse de forma elegante!\n\nEfeitos hover s√£o essenciais para boa experi√™ncia do usu√°rio. Voc√™ criou interatividade visual profissional!",
                commands: ['.botao {', '}', 'background: gray;', 'transition: all 0.3s ease;', '.botao:hover {', 'background: blue;']
            },
    
            // N√çVEL 11 - CSS GRID B√ÅSICO
            {
                story: "üì± Fant√°stico! Vamos dominar o Grid Layout.\n\nD√©cimo Primeiro Desafio: Crie uma grade de 3 colunas! Use 'display: grid', 'grid-template-columns: repeat(3, 1fr)' e 'gap: 15px' para criar um layout em grade uniforme.",
                concept: "CSS Grid - B√°sico",
                explanation: "CSS GRID √© o sistema de layout 2D mais poderoso! Permite criar grades complexas com linhas e colunas. 1fr significa 'uma fra√ß√£o', dividindo o espa√ßo igualmente!",
                solution: ['.grid {', 'display: grid;', 'grid-template-columns: repeat(3, 1fr);', 'gap: 15px;', '}'],
                success: "üèóÔ∏è Sensacional! Voc√™ criou um layout em grade perfeito!\n\nCSS Grid √© o futuro dos layouts web. Agora voc√™ pode criar estruturas complexas com facilidade!",
                commands: ['.grid {', '}', 'display: grid;', 'grid-template-columns: repeat(3, 1fr);', 'gap: 15px;', 'grid-template-rows: auto;']
            },
    
            // N√çVEL 12 - CSS GRID AVAN√áADO
            {
                story: "üéØ Excelente! Vamos criar layouts complexos com Grid.\n\nD√©cimo Segundo Desafio: Crie um layout de blog! Use 'grid-template-areas' para definir √°reas nomeadas: 'header header' na primeira linha e 'sidebar content' na segunda.",
                concept: "CSS Grid - Avan√ßado",
                explanation: "GRID AREAS permitem layouts nomeados e intuitivos! Voc√™ desenha o layout com strings e depois atribui elementos √†s √°reas. √â como desenhar com c√≥digo!",
                solution: ['.layout {', 'display: grid;', 'grid-template-areas:', '"header header"', '"sidebar content";', '}'],
                success: "üèõÔ∏è Incr√≠vel! Voc√™ criou um layout complexo com √°reas nomeadas!\n\nGrid Areas s√£o uma das funcionalidades mais elegantes do CSS. Layouts complexos agora s√£o intuitivos!",
                commands: ['.layout {', '}', 'display: grid;', 'grid-template-areas:', '"header header"', '"sidebar content";']
            },
    
            // N√çVEL 13 - RESPONSIVIDADE
            {
                story: "üì± Fant√°stico! Vamos fazer designs responsivos.\n\nD√©cimo Terceiro Desafio: Crie um breakpoint mobile! Use '@media (max-width: 768px)' para aplicar 'flex-direction: column' em telas menores que 768px.",
                concept: "Media Queries",
                explanation: "MEDIA QUERIES adaptam designs a diferentes dispositivos! Voc√™ pode aplicar estilos espec√≠ficos baseados no tamanho da tela, orienta√ß√£o, resolu√ß√£o. √â design para todos!",
                solution: ['@media (max-width: 768px) {', '.container {', 'flex-direction: column;', '}', '}'],
                success: "üì± Perfeito! Seu design agora se adapta a diferentes telas!\n\nResponsividade √© essencial hoje em dia. Voc√™ garantiu que seu design funciona em qualquer dispositivo!",
                commands: ['@media (max-width: 768px) {', '.container {', '}', 'flex-direction: column;', 'font-size: 14px;']
            },
    
            // N√çVEL 14 - PSEUDO-ELEMENTOS
            {
                story: "‚ú® Excelente! Vamos criar elementos decorativos.\n\nD√©cimo Quarto Desafio: Adicione um elemento decorativo! Use '::before' para criar um elemento decorativo, defina 'content: \"‚òÖ\"' e 'position: absolute' para posicion√°-lo.",
                concept: "Pseudo-elementos",
                explanation: "PSEUDO-ELEMENTOS criam elementos virtuais! ::before e ::after adicionam conte√∫do decorativo sem HTML extra. √â como magia CSS para detalhes visuais!",
                solution: ['.titulo::before {', 'content: \"‚òÖ\";', 'position: absolute;', 'left: -20px;', '}'],
                success: "‚≠ê Sensacional! Voc√™ adicionou elementos decorativos com CSS puro!\n\nPseudo-elementos s√£o uma ferramenta poderosa para detalhes visuais sem poluir o HTML!",
                commands: ['.titulo::before {', '}', 'content: \"‚òÖ\";', 'position: absolute;', 'left: -20px;', 'color: gold;']
            },
    
            // N√çVEL 15 - VARI√ÅVEIS CSS
            {
                story: "üé® Incr√≠vel! Vamos organizar com vari√°veis CSS.\n\nD√©cimo Quinto Desafio: Crie um sistema de cores! Use ':root' para definir '--cor-primaria: #3498db' e depois use 'color: var(--cor-primaria)' em um elemento.",
                concept: "Vari√°veis CSS",
                explanation: "VARI√ÅVEIS CSS (Custom Properties) permitem reutilizar valores! Defina uma vez e use em v√°rios lugares. Mudan√ßas ficam centralizadas e manuten√ß√£o fica muito mais f√°cil!",
                solution: [':root {', '--cor-primaria: #3498db;', '}', '.texto {', 'color: var(--cor-primaria);', '}'],
                success: "üîß Fant√°stico! Voc√™ criou um sistema de vari√°veis reutiliz√°veis!\n\nVari√°veis CSS tornam seus estilos mais organizados e f√°ceis de manter. √â programa√ß√£o aplicada ao design!",
                commands: [':root {', '}', '--cor-primaria: #3498db;', '.texto {', 'color: var(--cor-primaria);', '--tamanho: 16px;']
            },
    
            // N√çVEL 16 - FILTROS CSS
            {
                story: "üåà Perfeito! Vamos aplicar filtros visuais.\n\nD√©cimo Sexto Desafio: Adicione efeitos especiais! Use 'filter: blur(2px)' para desfocar um elemento e 'filter: brightness(1.2)' para deix√°-lo mais brilhante no hover.",
                concept: "Filtros CSS",
                explanation: "FILTROS CSS aplicam efeitos visuais como no Photoshop! blur(), brightness(), contrast(), grayscale() e muitos outros. √â edi√ß√£o de imagem direto no CSS!",
                solution: ['.imagem {', 'filter: blur(2px);', '}', '.imagem:hover {', 'filter: brightness(1.2);', '}'],
                success: "üé≠ Incr√≠vel! Voc√™ aplicou filtros profissionais com CSS puro!\n\nFiltros CSS oferecem possibilidades criativas infinitas. Seus elementos agora t√™m efeitos dignos de editores profissionais!",
                commands: ['.imagem {', '}', 'filter: blur(2px);', 'filter: brightness(1.2);', 'filter: grayscale(50%);', '.imagem:hover {']
            },
    
            // N√çVEL 17 - CLIP-PATH
            {
                story: "‚úÇÔ∏è Sensacional! Vamos criar formas customizadas.\n\nD√©cimo S√©timo Desafio: Recorte formas √∫nicas! Use 'clip-path: polygon(50% 0%, 0% 100%, 100% 100%)' para criar um tri√¢ngulo a partir de um elemento retangular.",
                concept: "Clip-path",
                explanation: "CLIP-PATH permite recortar elementos em formas personalizadas! C√≠rculos, pol√≠gonos, ellipses - voc√™ pode criar qualquer forma geom√©trica. √â escultura digital!",
                solution: ['.triangulo {', 'clip-path: polygon(50% 0%, 0% 100%, 100% 100%);', '}'],
                success: "üî∫ Fant√°stico! Voc√™ criou formas geom√©tricas personalizadas!\n\nClip-path abre um mundo de possibilidades criativas. Agora voc√™ pode criar designs √∫nicos e n√£o convencionais!",
                commands: ['.triangulo {', '}', 'clip-path: polygon(50% 0%, 0% 100%, 100% 100%);', 'clip-path: circle(50%);', 'clip-path: ellipse(25% 40%);']
            },
    
            // N√çVEL 18 - 3D TRANSFORMS
            {
                story: "üé™ Incr√≠vel! Vamos explorar a terceira dimens√£o.\n\nD√©cimo Oitavo Desafio: Crie profundidade 3D! Use 'transform: perspective(1000px) rotateY(45deg)' para rotacionar em 3D e 'transform-style: preserve-3d' no container.",
                concept: "Transforma√ß√µes 3D",
                explanation: "TRANSFORMA√á√ïES 3D adicionam profundidade real! perspective() define o ponto de vista, rotateX/Y/Z rotacionam nos eixos 3D. √â como ter um motor 3D no CSS!",
                solution: ['.container {', 'transform-style: preserve-3d;', '}', '.elemento {', 'transform: perspective(1000px) rotateY(45deg);', '}'],
                success: "üåü Extraordin√°rio! Voc√™ criou efeitos 3D impressionantes!\n\nTransforma√ß√µes 3D elevam seus designs a outro n√≠vel. Agora voc√™ pode criar experi√™ncias visuais tridimensionais!",
                commands: ['.container {', '}', 'transform-style: preserve-3d;', '.elemento {', 'transform: perspective(1000px) rotateY(45deg);', 'transform: rotateX(30deg);']
            },
    
            // N√çVEL 19 - ANIMA√á√ïES COMPLEXAS
            {
                story: "üé¨ Perfeito! Vamos criar anima√ß√µes cinematogr√°ficas.\n\nD√©cimo Nono Desafio: Crie uma sequ√™ncia animada! Use '@keyframes' com m√∫ltiplos est√°gios: 0% scale(1), 25% scale(1.1) rotate(10deg), 50% scale(0.9), 100% scale(1) rotate(0deg).",
                concept: "Anima√ß√µes Complexas",
                explanation: "ANIMA√á√ïES COMPLEXAS combinam m√∫ltiplas propriedades e timing! Voc√™ pode criar sequ√™ncias elaboradas com diferentes transforma√ß√µes, cores e posi√ß√µes. √â cinema digital!",
                solution: ['@keyframes complexa {', '0% { transform: scale(1) rotate(0deg); }', '25% { transform: scale(1.1) rotate(10deg); }', '50% { transform: scale(0.9) rotate(-5deg); }', '100% { transform: scale(1) rotate(0deg); }', '}', '.elemento { animation: complexa 3s ease-in-out; }'],
                success: "üé≠ Sensacional! Voc√™ criou uma anima√ß√£o digna de cinema!\n\nAnima√ß√µes complexas s√£o a marca de designers avan√ßados. Voc√™ dominou a arte do movimento digital!",
                commands: ['@keyframes complexa {', '0% { transform: scale(1) rotate(0deg); }', '25% { transform: scale(1.1) rotate(10deg); }', '50% { transform: scale(0.9) rotate(-5deg); }', '100% { transform: scale(1) rotate(0deg); }', '}', '.elemento { animation: complexa 3s ease-in-out; }']
            },
    
            // N√çVEL 20 - PROJETO FINAL AVAN√áADO
            {
                story: "üèÜ DESAFIO FINAL √âPICO!\n\nVoc√™ chegou ao √∫ltimo n√≠vel! Crie um cart√£o interativo completo que combine tudo que aprendeu: Use CSS Grid para layout, vari√°veis para cores, transforma√ß√µes 3D no hover, anima√ß√µes suaves, gradientes e sombras modernas.\n\nMostre que voc√™ √© um mestre do CSS!",
                concept: "Projeto Integrado Avan√ßado",
                explanation: "PROJETO FINAL integra todos os conceitos avan√ßados! Grid layout, vari√°veis CSS, transforma√ß√µes 3D, anima√ß√µes, filtros, gradientes - tudo trabalhando em harmonia. √â o teste definitivo do seu dom√≠nio CSS!",
                solution: [':root { --cor-card: #2c3e50; }', '.card {', 'display: grid;', 'background: linear-gradient(135deg, var(--cor-card), #34495e);', 'border-radius: 15px;', 'box-shadow: 0 10px 30px rgba(0,0,0,0.3);', 'transition: all 0.5s ease;', 'transform-style: preserve-3d;', '}', '.card:hover {', 'transform: perspective(1000px) rotateY(10deg) scale(1.05);', 'filter: brightness(1.1);', '}'],
                success: "üéâüèÜ PARAB√âNS, MESTRE DO CSS! üèÜüéâ\n\nVoc√™ completou todos os 20 n√≠veis e se tornou um verdadeiro especialista em CSS! Dominou desde seletores b√°sicos at√© transforma√ß√µes 3D complexas.\n\nAgora voc√™ pode criar qualquer design que imaginar - layouts responsivos, anima√ß√µes cinematogr√°ficas, efeitos 3D e muito mais!\n\nSeu conhecimento em CSS √© agora de n√≠vel profissional! üöÄ‚ú®",
                commands: [':root { --cor-card: #2c3e50; }', '.card {', '}', 'display: grid;', 'background: linear-gradient(135deg, var(--cor-card), #34495e);', 'border-radius: 15px;', 'box-shadow: 0 10px 30px rgba(0,0,0,0.3);', 'transition: all 0.5s ease;', 'transform-style: preserve-3d;', '.card:hover {', 'transform: perspective(1000px) rotateY(10deg) scale(1.05);', 'filter: brightness(1.1);']
            }
        ]
    }
};

function selectTrack(trackName) {
    selectedTrack = trackName;
    currentTrackData = tracks[trackName];
    currentLevel = 1;
    
    document.getElementById('selectionScreen').classList.add('hidden');
    document.getElementById('gameScreen').classList.remove('hidden');
    
    // Atualizar header com informa√ß√µes da trilha
    document.getElementById('gameTitle').innerHTML = `${currentTrackData.icon} Aventura do C√≥digo`;
    document.getElementById('trackName').textContent = currentTrackData.name;
    
    // Atualizar personagem baseado na trilha
    const character = document.getElementById('character');
    character.textContent = currentTrackData.character;
    
    // Carregar primeiro n√≠vel
    loadLevel();
}

function backToSelection() {
    document.getElementById('gameScreen').classList.add('hidden');
    document.getElementById('selectionScreen').classList.remove('hidden');
    
    // Reset do jogo
    currentLevel = 1;
    userCommands = [];
    selectedTrack = '';
}

function addCommand(command) {
    userCommands.push(command);
    updateCodeDisplay();
}

function updateCodeDisplay() {
    const codeEditor = document.getElementById('codeEditor');
    
    // Limpar editor mantendo apenas o coment√°rio inicial
    codeEditor.innerHTML = `
        <div class="code-line">
            <span class="line-number">1</span>
            <span style="color: #4CAF50;">// Seu c√≥digo aqui:</span>
        </div>
    `;
    
    // Adicionar comandos do usu√°rio
    userCommands.forEach((command, index) => {
        const lineDiv = document.createElement('div');
        lineDiv.className = 'code-line user-line';
        lineDiv.innerHTML = `
            <span class="line-number">${index + 2}</span>
            <span style="color: #FFD93D;">${command}</span>
            <button class="remove-line-btn" onclick="removeCommand(${index})" title="Remover esta linha">√ó</button>
        `;
        codeEditor.appendChild(lineDiv);
    });
}

function clearCode() {
    userCommands = [];
    updateCodeDisplay();
    document.getElementById('resultPanel').classList.remove('show');
}

function undoLastCommand() {
    if (userCommands.length > 0) {
        userCommands.pop();
        updateCodeDisplay();
    }
}

function removeCommand(index) {
    userCommands.splice(index, 1);
    updateCodeDisplay();
}

function runCode() {
    const level = currentTrackData.levels[currentLevel - 1];
    const character = document.getElementById('character');
    const resultPanel = document.getElementById('resultPanel');
    const resultText = document.getElementById('resultText');

    // Anima√ß√£o do personagem baseada na trilha
    character.classList.add('moving');
    
    if (selectedTrack === 'css') {
        // Anima√ß√£o especial para CSS
        character.style.background = 'linear-gradient(45deg, #e74c3c, #f39c12)';
        setTimeout(() => {
            character.style.background = '#FF6B6B';
            character.classList.remove('moving');
        }, 1500);
    } else if (selectedTrack === 'javascript') {
        // Anima√ß√£o especial para JavaScript
        character.style.background = 'linear-gradient(45deg, #f1c40f, #f39c12)';
        setTimeout(() => {
            character.style.background = '#FF6B6B';
            character.classList.remove('moving');
        }, 1500);
    } else {
        setTimeout(() => character.classList.remove('moving'), 1000);
    }

    // Verificar se a solu√ß√£o est√° correta
    const isCorrect = arraysEqual(userCommands, level.solution);

    setTimeout(() => {
        if (isCorrect) {
            resultText.innerHTML = `<div style="color: #27ae60; font-weight: bold;">${level.success}</div>`;
            if (currentLevel < currentTrackData.levels.length) {
                document.getElementById('nextBtn').style.display = 'block';
            } else {
                // Trilha completada
                document.getElementById('nextBtn').innerHTML = 'üéì Trilha Conclu√≠da!';
                document.getElementById('nextBtn').style.display = 'block';
                document.getElementById('nextBtn').onclick = () => {
                    alert(`Parab√©ns! Voc√™ completou a trilha de ${currentTrackData.name}! üöÄ\n\nAgora voc√™ domina os conceitos fundamentais dessa √°rea. Que tal experimentar outra trilha?`);
                    backToSelection();
                };
            }
        } else {
            let hintText = getTrackSpecificHint(level.solution);
            
            resultText.innerHTML = `<div style="color: #e74c3c; font-weight: bold;">ü§î Ops! Essa sequ√™ncia n√£o funcionou. Tente novamente!</div>
            <div style="margin-top: 10px; color: #7f8c8d;">
                <strong>Dica:</strong> ${hintText}
            </div>`;
            document.getElementById('nextBtn').style.display = 'none';
        }
        resultPanel.classList.add('show');
    }, 1500);
}

function getTrackSpecificHint(solution) {
    if (selectedTrack === 'javascript') {
        return `Voc√™ precisa usar: ${solution.join(' ‚Üí ')}. Lembre-se da sintaxe do JavaScript!`;
    } else if (selectedTrack === 'css') {
        return `Voc√™ precisa usar: ${solution.join(' ')}. N√£o esque√ßa das chaves e ponto-e-v√≠rgula!`;
    } else {
        return `Voc√™ precisa usar: ${solution.join(' ‚Üí ')}`;
    }
}

function arraysEqual(a, b) {
    return a.length === b.length && a.every((val, i) => val === b[i]);
}

function nextLevel() {
    if (currentLevel < currentTrackData.levels.length) {
        currentLevel++;
        loadLevel();
        clearCode();
    }
}

function loadLevel() {
    const level = currentTrackData.levels[currentLevel - 1];
    document.getElementById('currentLevel').textContent = currentLevel;
    document.getElementById('currentConcept').textContent = level.concept;
    document.getElementById('storyText').innerHTML = level.story.replace(/\n/g, '<br>');
    document.getElementById('conceptExplanation').innerHTML = 
        `<h4>üí° Conceito: ${level.concept}</h4>${level.explanation}`;
    
    // Atualizar comandos dispon√≠veis para o n√≠vel atual
    const commandsContainer = document.getElementById('availableCommands');
    commandsContainer.innerHTML = '<h3>üìù Comandos Dispon√≠veis:</h3>';
    
    level.commands.forEach(command => {
        const btn = document.createElement('button');
        btn.className = 'command-btn';
        btn.textContent = command;
        btn.onclick = () => addCommand(command);
        commandsContainer.appendChild(btn);
    });
    
    // Limpar o c√≥digo quando carregar novo n√≠vel
    clearCode();
}

// Inicializar mostrando a tela de sele√ß√£o
document.getElementById('selectionScreen').classList.remove('hidden');
document.getElementById('gameScreen').classList.add('hidden');