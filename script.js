let currentLevel = 1;
        let userCommands = [];
        
        const levels = [
            {
                story: "üåü Bem-vindo √† Aventura do C√≥digo!\n\nVoc√™ √© um jovem programador que acabou de chegar ao Reino Digital. Sua miss√£o √© ajudar o her√≥i ü§ñ a atravessar diferentes desafios usando o poder da programa√ß√£o!\n\nPrimeiro Desafio: O her√≥i precisa se mover para frente para encontrar a chave m√°gica. Use os comandos dispon√≠veis para programar suas a√ß√µes!",
                concept: "Comandos B√°sicos",
                explanation: "Na programa√ß√£o, damos instru√ß√µes espec√≠ficas para o computador executar. Cada comando faz uma a√ß√£o diferente. Comece com comandos simples!",
                solution: ['mover()'],
                success: "üéâ Excelente! O her√≥i se moveu e encontrou a chave m√°gica! ‚ú®\n\nVoc√™ aprendeu que na programa√ß√£o, cada comando executa uma a√ß√£o espec√≠fica. O comando mover() fez o her√≥i se deslocar.",
                commands: ['mover()', 'pular()', 'pegar()', 'esperar()']
            },
            {
                story: "üóùÔ∏è √ìtimo trabalho! Agora o her√≥i tem a chave m√°gica.\n\nSegundo Desafio: H√° um obst√°culo √† frente! O her√≥i precisa PULAR sobre ele e depois PEGAR o tesouro do outro lado.\n\nLembre-se: a ordem dos comandos importa muito na programa√ß√£o!",
                concept: "Sequ√™ncia de Comandos",
                explanation: "Na programa√ß√£o, a ORDEM das instru√ß√µes √© fundamental! Os comandos s√£o executados um ap√≥s o outro, de cima para baixo.",
                solution: ['pular()', 'pegar()'],
                success: "üèÜ Fant√°stico! O her√≥i pulou o obst√°culo e pegou o tesouro!\n\nVoc√™ aprendeu sobre SEQU√äNCIA: os comandos s√£o executados na ordem que voc√™ os escreve. Primeiro pular(), depois pegar()!",
                commands: ['mover()', 'pular()', 'pegar()', 'esperar()']
            },
            {
                story: "üí∞ Incr√≠vel! O her√≥i coletou o tesouro.\n\nTerceiro Desafio: Agora h√° uma sequ√™ncia mais complexa! O her√≥i precisa:\n1. MOVER para se aproximar\n2. ESPERAR um momento (para o guarda passar)\n3. PULAR sobre a armadilha\n4. PEGAR a po√ß√£o m√°gica\n\nPense na sequ√™ncia correta!",
                concept: "Algoritmos Simples",
                explanation: "Um ALGORITMO √© uma sequ√™ncia de passos para resolver um problema. Como uma receita de bolo, cada passo deve ser feito na ordem certa!",
                solution: ['mover()', 'esperar()', 'pular()', 'pegar()'],
                success: "üß™ Perfeito! O her√≥i executou todo o algoritmo corretamente!\n\nVoc√™ criou seu primeiro ALGORITMO completo: uma sequ√™ncia l√≥gica de comandos para resolver um problema complexo!",
                commands: ['mover()', 'pular()', 'pegar()', 'esperar()']
            }
        ];

        function addCommand(command) {
            userCommands.push(command);
            updateCodeDisplay();
        }

        function updateCodeDisplay() {
            const userCodeElement = document.getElementById('userCode');
            userCodeElement.innerHTML = userCommands.join('<br><span class="line-number">' + (userCommands.length + 2) + '</span>');
        }

        function runCode() {
            const level = levels[currentLevel - 1];
            const character = document.getElementById('character');
            const resultPanel = document.getElementById('resultPanel');
            const resultText = document.getElementById('resultText');

            // Anima√ß√£o do personagem
            character.classList.add('moving');
            setTimeout(() => character.classList.remove('moving'), 1000);

            // Verificar se a solu√ß√£o est√° correta
            const isCorrect = arraysEqual(userCommands, level.solution);

            setTimeout(() => {
                if (isCorrect) {
                    resultText.innerHTML = `<div style="color: #27ae60; font-weight: bold;">${level.success}</div>`;
                    document.getElementById('nextBtn').style.display = currentLevel < levels.length ? 'block' : 'none';
                } else {
                    resultText.innerHTML = `<div style="color: #e74c3c; font-weight: bold;">ü§î Ops! Essa sequ√™ncia n√£o funcionou. Tente novamente!</div>
                    <div style="margin-top: 10px; color: #7f8c8d;">
                        <strong>Dica:</strong> ${getSolutionHint(level.solution)}
                    </div>`;
                    document.getElementById('nextBtn').style.display = 'none';
                }
                resultPanel.classList.add('show');
            }, 1500);
        }

        function getSolutionHint(solution) {
            const hints = {
                'mover()': 'O her√≥i precisa se mover!',
                'pular()': 'H√° algo para pular!',
                'pegar()': 'N√£o esque√ßa de pegar o item!',
                'esperar()': '√Äs vezes √© preciso esperar o momento certo!'
            };
            
            return `Voc√™ precisa usar: ${solution.map(cmd => cmd).join(' ‚Üí ')}`;
        }

        function arraysEqual(a, b) {
            return a.length === b.length && a.every((val, i) => val === b[i]);
        }

        function nextLevel() {
            if (currentLevel < levels.length) {
                currentLevel++;
                loadLevel();
                resetCode();
            }
        }

        function loadLevel() {
            const level = levels[currentLevel - 1];
            document.getElementById('currentLevel').textContent = currentLevel;
            document.getElementById('currentConcept').textContent = level.concept;
            document.getElementById('storyText').innerHTML = level.story.replace(/\n/g, '<br>');
            document.getElementById('conceptExplanation').innerHTML = 
                `<h4>üí° Conceito: ${level.concept}</h4>${level.explanation}`;
        }

        function resetCode() {
            userCommands = [];
            updateCodeDisplay();
            document.getElementById('resultPanel').classList.remove('show');
        }

        // Inicializar o jogo
        loadLevel();